/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BidUpdateManyWithoutUser1sInput } from "./BidUpdateManyWithoutUser1sInput";
import { ValidateNested, IsOptional, IsString, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { JobUpdateManyWithoutUser1sInput } from "./JobUpdateManyWithoutUser1sInput";
import { MessageUpdateManyWithoutUser1sInput } from "./MessageUpdateManyWithoutUser1sInput";
import { ReviewUpdateManyWithoutUser1sInput } from "./ReviewUpdateManyWithoutUser1sInput";
import { EnumUser1Role } from "./EnumUser1Role";
import { SkillUpdateManyWithoutUser1sInput } from "./SkillUpdateManyWithoutUser1sInput";
import { TransactionUpdateManyWithoutUser1sInput } from "./TransactionUpdateManyWithoutUser1sInput";

@InputType()
class User1UpdateInput {
  @ApiProperty({
    required: false,
    type: () => BidUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => BidUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => BidUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  bids?: BidUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
    type: () => JobUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => JobUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => JobUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  jobs?: JobUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileImage?: string | null;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  receivedMessages?: MessageUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  reviewsAsClient?: ReviewUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  reviewsAsFreelancer?: ReviewUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    enum: EnumUser1Role,
  })
  @IsEnum(EnumUser1Role)
  @IsOptional()
  @Field(() => EnumUser1Role, {
    nullable: true,
  })
  role?: "CLIENT" | "FREELANCER";

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  sentMessages?: MessageUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => SkillUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => SkillUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => SkillUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  skills?: SkillUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  transactionsAsClient?: TransactionUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutUser1sInput, {
    nullable: true,
  })
  transactionsAsFreelancer?: TransactionUpdateManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;
}

export { User1UpdateInput as User1UpdateInput };
