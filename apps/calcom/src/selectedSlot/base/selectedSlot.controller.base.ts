/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SelectedSlotService } from "../selectedSlot.service";
import { SelectedSlotCreateInput } from "./SelectedSlotCreateInput";
import { SelectedSlot } from "./SelectedSlot";
import { SelectedSlotFindManyArgs } from "./SelectedSlotFindManyArgs";
import { SelectedSlotWhereUniqueInput } from "./SelectedSlotWhereUniqueInput";
import { SelectedSlotUpdateInput } from "./SelectedSlotUpdateInput";

export class SelectedSlotControllerBase {
  constructor(protected readonly service: SelectedSlotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SelectedSlot })
  async createSelectedSlot(
    @common.Body() data: SelectedSlotCreateInput
  ): Promise<SelectedSlot> {
    return await this.service.createSelectedSlot({
      data: data,
      select: {
        eventTypeId: true,
        id: true,
        isSeat: true,
        releaseAt: true,
        slotUtcEndDate: true,
        slotUtcStartDate: true,
        uid: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SelectedSlot] })
  @ApiNestedQuery(SelectedSlotFindManyArgs)
  async selectedSlots(@common.Req() request: Request): Promise<SelectedSlot[]> {
    const args = plainToClass(SelectedSlotFindManyArgs, request.query);
    return this.service.selectedSlots({
      ...args,
      select: {
        eventTypeId: true,
        id: true,
        isSeat: true,
        releaseAt: true,
        slotUtcEndDate: true,
        slotUtcStartDate: true,
        uid: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SelectedSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async selectedSlot(
    @common.Param() params: SelectedSlotWhereUniqueInput
  ): Promise<SelectedSlot | null> {
    const result = await this.service.selectedSlot({
      where: params,
      select: {
        eventTypeId: true,
        id: true,
        isSeat: true,
        releaseAt: true,
        slotUtcEndDate: true,
        slotUtcStartDate: true,
        uid: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SelectedSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSelectedSlot(
    @common.Param() params: SelectedSlotWhereUniqueInput,
    @common.Body() data: SelectedSlotUpdateInput
  ): Promise<SelectedSlot | null> {
    try {
      return await this.service.updateSelectedSlot({
        where: params,
        data: data,
        select: {
          eventTypeId: true,
          id: true,
          isSeat: true,
          releaseAt: true,
          slotUtcEndDate: true,
          slotUtcStartDate: true,
          uid: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SelectedSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSelectedSlot(
    @common.Param() params: SelectedSlotWhereUniqueInput
  ): Promise<SelectedSlot | null> {
    try {
      return await this.service.deleteSelectedSlot({
        where: params,
        select: {
          eventTypeId: true,
          id: true,
          isSeat: true,
          releaseAt: true,
          slotUtcEndDate: true,
          slotUtcStartDate: true,
          uid: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
