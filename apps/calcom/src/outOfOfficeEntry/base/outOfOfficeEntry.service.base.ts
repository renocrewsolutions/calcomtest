/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OutOfOfficeEntry } from "@prisma/client";

export class OutOfOfficeEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.OutOfOfficeEntryCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutOfOfficeEntryCountArgs>
  ): Promise<number> {
    return this.prisma.outOfOfficeEntry.count(args);
  }

  async outOfOfficeEntries<T extends Prisma.OutOfOfficeEntryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutOfOfficeEntryFindManyArgs>
  ): Promise<OutOfOfficeEntry[]> {
    return this.prisma.outOfOfficeEntry.findMany(args);
  }
  async outOfOfficeEntry<T extends Prisma.OutOfOfficeEntryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutOfOfficeEntryFindUniqueArgs>
  ): Promise<OutOfOfficeEntry | null> {
    return this.prisma.outOfOfficeEntry.findUnique(args);
  }
  async createOutOfOfficeEntry<T extends Prisma.OutOfOfficeEntryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutOfOfficeEntryCreateArgs>
  ): Promise<OutOfOfficeEntry> {
    return this.prisma.outOfOfficeEntry.create<T>(args);
  }
  async updateOutOfOfficeEntry<T extends Prisma.OutOfOfficeEntryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutOfOfficeEntryUpdateArgs>
  ): Promise<OutOfOfficeEntry> {
    return this.prisma.outOfOfficeEntry.update<T>(args);
  }
  async deleteOutOfOfficeEntry<T extends Prisma.OutOfOfficeEntryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OutOfOfficeEntryDeleteArgs>
  ): Promise<OutOfOfficeEntry> {
    return this.prisma.outOfOfficeEntry.delete(args);
  }
}
