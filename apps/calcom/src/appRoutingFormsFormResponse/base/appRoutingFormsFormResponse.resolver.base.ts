/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AppRoutingFormsFormResponse } from "./AppRoutingFormsFormResponse";
import { AppRoutingFormsFormResponseCountArgs } from "./AppRoutingFormsFormResponseCountArgs";
import { AppRoutingFormsFormResponseFindManyArgs } from "./AppRoutingFormsFormResponseFindManyArgs";
import { AppRoutingFormsFormResponseFindUniqueArgs } from "./AppRoutingFormsFormResponseFindUniqueArgs";
import { CreateAppRoutingFormsFormResponseArgs } from "./CreateAppRoutingFormsFormResponseArgs";
import { UpdateAppRoutingFormsFormResponseArgs } from "./UpdateAppRoutingFormsFormResponseArgs";
import { DeleteAppRoutingFormsFormResponseArgs } from "./DeleteAppRoutingFormsFormResponseArgs";
import { AppRoutingFormsForm } from "../../appRoutingFormsForm/base/AppRoutingFormsForm";
import { AppRoutingFormsFormResponseService } from "../appRoutingFormsFormResponse.service";
@graphql.Resolver(() => AppRoutingFormsFormResponse)
export class AppRoutingFormsFormResponseResolverBase {
  constructor(protected readonly service: AppRoutingFormsFormResponseService) {}

  async _appRoutingFormsFormResponsesMeta(
    @graphql.Args() args: AppRoutingFormsFormResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppRoutingFormsFormResponse])
  async appRoutingFormsFormResponses(
    @graphql.Args() args: AppRoutingFormsFormResponseFindManyArgs
  ): Promise<AppRoutingFormsFormResponse[]> {
    return this.service.appRoutingFormsFormResponses(args);
  }

  @graphql.Query(() => AppRoutingFormsFormResponse, { nullable: true })
  async appRoutingFormsFormResponse(
    @graphql.Args() args: AppRoutingFormsFormResponseFindUniqueArgs
  ): Promise<AppRoutingFormsFormResponse | null> {
    const result = await this.service.appRoutingFormsFormResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppRoutingFormsFormResponse)
  async createAppRoutingFormsFormResponse(
    @graphql.Args() args: CreateAppRoutingFormsFormResponseArgs
  ): Promise<AppRoutingFormsFormResponse> {
    return await this.service.createAppRoutingFormsFormResponse({
      ...args,
      data: {
        ...args.data,

        form: {
          connect: args.data.form,
        },
      },
    });
  }

  @graphql.Mutation(() => AppRoutingFormsFormResponse)
  async updateAppRoutingFormsFormResponse(
    @graphql.Args() args: UpdateAppRoutingFormsFormResponseArgs
  ): Promise<AppRoutingFormsFormResponse | null> {
    try {
      return await this.service.updateAppRoutingFormsFormResponse({
        ...args,
        data: {
          ...args.data,

          form: {
            connect: args.data.form,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppRoutingFormsFormResponse)
  async deleteAppRoutingFormsFormResponse(
    @graphql.Args() args: DeleteAppRoutingFormsFormResponseArgs
  ): Promise<AppRoutingFormsFormResponse | null> {
    try {
      return await this.service.deleteAppRoutingFormsFormResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AppRoutingFormsForm, {
    nullable: true,
    name: "form",
  })
  async getForm(
    @graphql.Parent() parent: AppRoutingFormsFormResponse
  ): Promise<AppRoutingFormsForm | null> {
    const result = await this.service.getForm(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
