/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccessCode } from "./AccessCode";
import { AccessCodeCountArgs } from "./AccessCodeCountArgs";
import { AccessCodeFindManyArgs } from "./AccessCodeFindManyArgs";
import { AccessCodeFindUniqueArgs } from "./AccessCodeFindUniqueArgs";
import { CreateAccessCodeArgs } from "./CreateAccessCodeArgs";
import { UpdateAccessCodeArgs } from "./UpdateAccessCodeArgs";
import { DeleteAccessCodeArgs } from "./DeleteAccessCodeArgs";
import { OAuthClient } from "../../oAuthClient/base/OAuthClient";
import { Team } from "../../team/base/Team";
import { User } from "../../user/base/User";
import { AccessCodeService } from "../accessCode.service";
@graphql.Resolver(() => AccessCode)
export class AccessCodeResolverBase {
  constructor(protected readonly service: AccessCodeService) {}

  async _accessCodesMeta(
    @graphql.Args() args: AccessCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccessCode])
  async accessCodes(
    @graphql.Args() args: AccessCodeFindManyArgs
  ): Promise<AccessCode[]> {
    return this.service.accessCodes(args);
  }

  @graphql.Query(() => AccessCode, { nullable: true })
  async accessCode(
    @graphql.Args() args: AccessCodeFindUniqueArgs
  ): Promise<AccessCode | null> {
    const result = await this.service.accessCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccessCode)
  async createAccessCode(
    @graphql.Args() args: CreateAccessCodeArgs
  ): Promise<AccessCode> {
    return await this.service.createAccessCode({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AccessCode)
  async updateAccessCode(
    @graphql.Args() args: UpdateAccessCodeArgs
  ): Promise<AccessCode | null> {
    try {
      return await this.service.updateAccessCode({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessCode)
  async deleteAccessCode(
    @graphql.Args() args: DeleteAccessCodeArgs
  ): Promise<AccessCode | null> {
    try {
      return await this.service.deleteAccessCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => OAuthClient, {
    nullable: true,
    name: "client",
  })
  async getClient(
    @graphql.Parent() parent: AccessCode
  ): Promise<OAuthClient | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async getTeam(@graphql.Parent() parent: AccessCode): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: AccessCode): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
