/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OAuthClient, // @ts-ignore
  AccessCode,
} from "@prisma/client";

export class OAuthClientServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.OAuthClientCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthClientCountArgs>
  ): Promise<number> {
    return this.prisma.oAuthClient.count(args);
  }

  async oAuthClients<T extends Prisma.OAuthClientFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthClientFindManyArgs>
  ): Promise<OAuthClient[]> {
    return this.prisma.oAuthClient.findMany(args);
  }
  async oAuthClient<T extends Prisma.OAuthClientFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthClientFindUniqueArgs>
  ): Promise<OAuthClient | null> {
    return this.prisma.oAuthClient.findUnique(args);
  }
  async createOAuthClient<T extends Prisma.OAuthClientCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthClientCreateArgs>
  ): Promise<OAuthClient> {
    return this.prisma.oAuthClient.create<T>(args);
  }
  async updateOAuthClient<T extends Prisma.OAuthClientUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthClientUpdateArgs>
  ): Promise<OAuthClient> {
    return this.prisma.oAuthClient.update<T>(args);
  }
  async deleteOAuthClient<T extends Prisma.OAuthClientDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OAuthClientDeleteArgs>
  ): Promise<OAuthClient> {
    return this.prisma.oAuthClient.delete(args);
  }

  async findAccessCodes(
    parentId: string,
    args: Prisma.AccessCodeFindManyArgs
  ): Promise<AccessCode[]> {
    return this.prisma.oAuthClient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accessCodes(args);
  }
}
