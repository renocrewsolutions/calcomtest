/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CalendarCache, // @ts-ignore
  Credential,
} from "@prisma/client";

export class CalendarCacheServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CalendarCacheCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCacheCountArgs>
  ): Promise<number> {
    return this.prisma.calendarCache.count(args);
  }

  async calendarCaches<T extends Prisma.CalendarCacheFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCacheFindManyArgs>
  ): Promise<CalendarCache[]> {
    return this.prisma.calendarCache.findMany(args);
  }
  async calendarCache<T extends Prisma.CalendarCacheFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCacheFindUniqueArgs>
  ): Promise<CalendarCache | null> {
    return this.prisma.calendarCache.findUnique(args);
  }
  async createCalendarCache<T extends Prisma.CalendarCacheCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCacheCreateArgs>
  ): Promise<CalendarCache> {
    return this.prisma.calendarCache.create<T>(args);
  }
  async updateCalendarCache<T extends Prisma.CalendarCacheUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCacheUpdateArgs>
  ): Promise<CalendarCache> {
    return this.prisma.calendarCache.update<T>(args);
  }
  async deleteCalendarCache<T extends Prisma.CalendarCacheDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalendarCacheDeleteArgs>
  ): Promise<CalendarCache> {
    return this.prisma.calendarCache.delete(args);
  }

  async getCredential(parentId: number): Promise<Credential | null> {
    return this.prisma.calendarCache
      .findUnique({
        where: { id: parentId },
      })
      .credential();
  }
}
