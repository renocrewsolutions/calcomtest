/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WebhookScheduledTrigger } from "./WebhookScheduledTrigger";
import { WebhookScheduledTriggerCountArgs } from "./WebhookScheduledTriggerCountArgs";
import { WebhookScheduledTriggerFindManyArgs } from "./WebhookScheduledTriggerFindManyArgs";
import { WebhookScheduledTriggerFindUniqueArgs } from "./WebhookScheduledTriggerFindUniqueArgs";
import { CreateWebhookScheduledTriggerArgs } from "./CreateWebhookScheduledTriggerArgs";
import { UpdateWebhookScheduledTriggerArgs } from "./UpdateWebhookScheduledTriggerArgs";
import { DeleteWebhookScheduledTriggerArgs } from "./DeleteWebhookScheduledTriggerArgs";
import { WebhookScheduledTriggerService } from "../webhookScheduledTrigger.service";
@graphql.Resolver(() => WebhookScheduledTrigger)
export class WebhookScheduledTriggerResolverBase {
  constructor(protected readonly service: WebhookScheduledTriggerService) {}

  async _webhookScheduledTriggersMeta(
    @graphql.Args() args: WebhookScheduledTriggerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WebhookScheduledTrigger])
  async webhookScheduledTriggers(
    @graphql.Args() args: WebhookScheduledTriggerFindManyArgs
  ): Promise<WebhookScheduledTrigger[]> {
    return this.service.webhookScheduledTriggers(args);
  }

  @graphql.Query(() => WebhookScheduledTrigger, { nullable: true })
  async webhookScheduledTrigger(
    @graphql.Args() args: WebhookScheduledTriggerFindUniqueArgs
  ): Promise<WebhookScheduledTrigger | null> {
    const result = await this.service.webhookScheduledTrigger(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WebhookScheduledTrigger)
  async createWebhookScheduledTrigger(
    @graphql.Args() args: CreateWebhookScheduledTriggerArgs
  ): Promise<WebhookScheduledTrigger> {
    return await this.service.createWebhookScheduledTrigger({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WebhookScheduledTrigger)
  async updateWebhookScheduledTrigger(
    @graphql.Args() args: UpdateWebhookScheduledTriggerArgs
  ): Promise<WebhookScheduledTrigger | null> {
    try {
      return await this.service.updateWebhookScheduledTrigger({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebhookScheduledTrigger)
  async deleteWebhookScheduledTrigger(
    @graphql.Args() args: DeleteWebhookScheduledTriggerArgs
  ): Promise<WebhookScheduledTrigger | null> {
    try {
      return await this.service.deleteWebhookScheduledTrigger(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
