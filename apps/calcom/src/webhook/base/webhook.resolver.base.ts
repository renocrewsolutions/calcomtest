/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Webhook } from "./Webhook";
import { WebhookCountArgs } from "./WebhookCountArgs";
import { WebhookFindManyArgs } from "./WebhookFindManyArgs";
import { WebhookFindUniqueArgs } from "./WebhookFindUniqueArgs";
import { CreateWebhookArgs } from "./CreateWebhookArgs";
import { UpdateWebhookArgs } from "./UpdateWebhookArgs";
import { DeleteWebhookArgs } from "./DeleteWebhookArgs";
import { AppModel } from "../../appModel/base/AppModel";
import { EventType } from "../../eventType/base/EventType";
import { Team } from "../../team/base/Team";
import { WebhookService } from "../webhook.service";
@graphql.Resolver(() => Webhook)
export class WebhookResolverBase {
  constructor(protected readonly service: WebhookService) {}

  async _webhooksMeta(
    @graphql.Args() args: WebhookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Webhook])
  async webhooks(
    @graphql.Args() args: WebhookFindManyArgs
  ): Promise<Webhook[]> {
    return this.service.webhooks(args);
  }

  @graphql.Query(() => Webhook, { nullable: true })
  async webhook(
    @graphql.Args() args: WebhookFindUniqueArgs
  ): Promise<Webhook | null> {
    const result = await this.service.webhook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Webhook)
  async createWebhook(
    @graphql.Args() args: CreateWebhookArgs
  ): Promise<Webhook> {
    return await this.service.createWebhook({
      ...args,
      data: {
        ...args.data,

        appField: args.data.appField
          ? {
              connect: args.data.appField,
            }
          : undefined,

        eventType: args.data.eventType
          ? {
              connect: args.data.eventType,
            }
          : undefined,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Webhook)
  async updateWebhook(
    @graphql.Args() args: UpdateWebhookArgs
  ): Promise<Webhook | null> {
    try {
      return await this.service.updateWebhook({
        ...args,
        data: {
          ...args.data,

          appField: args.data.appField
            ? {
                connect: args.data.appField,
              }
            : undefined,

          eventType: args.data.eventType
            ? {
                connect: args.data.eventType,
              }
            : undefined,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Webhook)
  async deleteWebhook(
    @graphql.Args() args: DeleteWebhookArgs
  ): Promise<Webhook | null> {
    try {
      return await this.service.deleteWebhook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AppModel, {
    nullable: true,
    name: "appField",
  })
  async getAppField(
    @graphql.Parent() parent: Webhook
  ): Promise<AppModel | null> {
    const result = await this.service.getAppField(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => EventType, {
    nullable: true,
    name: "eventType",
  })
  async getEventType(
    @graphql.Parent() parent: Webhook
  ): Promise<EventType | null> {
    const result = await this.service.getEventType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async getTeam(@graphql.Parent() parent: Webhook): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
