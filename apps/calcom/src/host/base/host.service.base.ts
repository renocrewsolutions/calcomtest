/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Host, // @ts-ignore
  EventType,
} from "@prisma/client";

export class HostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.HostCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostCountArgs>
  ): Promise<number> {
    return this.prisma.host.count(args);
  }

  async hosts<T extends Prisma.HostFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostFindManyArgs>
  ): Promise<Host[]> {
    return this.prisma.host.findMany(args);
  }
  async host<T extends Prisma.HostFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostFindUniqueArgs>
  ): Promise<Host | null> {
    return this.prisma.host.findUnique(args);
  }
  async createHost<T extends Prisma.HostCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostCreateArgs>
  ): Promise<Host> {
    return this.prisma.host.create<T>(args);
  }
  async updateHost<T extends Prisma.HostUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostUpdateArgs>
  ): Promise<Host> {
    return this.prisma.host.update<T>(args);
  }
  async deleteHost<T extends Prisma.HostDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HostDeleteArgs>
  ): Promise<Host> {
    return this.prisma.host.delete(args);
  }

  async getEventType(parentId: number): Promise<EventType | null> {
    return this.prisma.host
      .findUnique({
        where: { id: parentId },
      })
      .eventType();
  }
}
