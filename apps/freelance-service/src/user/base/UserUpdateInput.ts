/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BidUpdateManyWithoutUsersInput } from "./BidUpdateManyWithoutUsersInput";
import { ValidateNested, IsOptional, IsString, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { JobUpdateManyWithoutUsersInput } from "./JobUpdateManyWithoutUsersInput";
import { MessageUpdateManyWithoutUsersInput } from "./MessageUpdateManyWithoutUsersInput";
import { ReviewUpdateManyWithoutUsersInput } from "./ReviewUpdateManyWithoutUsersInput";
import { EnumUserRole } from "./EnumUserRole";
import { SkillUpdateManyWithoutUsersInput } from "./SkillUpdateManyWithoutUsersInput";
import { TransactionUpdateManyWithoutUsersInput } from "./TransactionUpdateManyWithoutUsersInput";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    type: () => BidUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => BidUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => BidUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  bids?: BidUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
    type: () => JobUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => JobUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => JobUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  jobs?: JobUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileImage?: string | null;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  receivedMessages?: MessageUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  reviewsAsClient?: ReviewUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  reviewsAsFreelancer?: ReviewUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "CLIENT" | "FREELANCER";

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  sentMessages?: MessageUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SkillUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SkillUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SkillUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  skills?: SkillUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  transactionsAsClient?: TransactionUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TransactionUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TransactionUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TransactionUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  transactionsAsFreelancer?: TransactionUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;
}

export { UserUpdateInput as UserUpdateInput };
