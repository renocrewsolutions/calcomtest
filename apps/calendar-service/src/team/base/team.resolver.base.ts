/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Team } from "./Team";
import { TeamCountArgs } from "./TeamCountArgs";
import { TeamFindManyArgs } from "./TeamFindManyArgs";
import { TeamFindUniqueArgs } from "./TeamFindUniqueArgs";
import { CreateTeamArgs } from "./CreateTeamArgs";
import { UpdateTeamArgs } from "./UpdateTeamArgs";
import { DeleteTeamArgs } from "./DeleteTeamArgs";
import { AccessCodeFindManyArgs } from "../../accessCode/base/AccessCodeFindManyArgs";
import { AccessCode } from "../../accessCode/base/AccessCode";
import { ApiKeyFindManyArgs } from "../../apiKey/base/ApiKeyFindManyArgs";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { CredentialFindManyArgs } from "../../credential/base/CredentialFindManyArgs";
import { Credential } from "../../credential/base/Credential";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { InstantMeetingTokenFindManyArgs } from "../../instantMeetingToken/base/InstantMeetingTokenFindManyArgs";
import { InstantMeetingToken } from "../../instantMeetingToken/base/InstantMeetingToken";
import { VerificationTokenFindManyArgs } from "../../verificationToken/base/VerificationTokenFindManyArgs";
import { VerificationToken } from "../../verificationToken/base/VerificationToken";
import { MembershipFindManyArgs } from "../../membership/base/MembershipFindManyArgs";
import { Membership } from "../../membership/base/Membership";
import { ProfileFindManyArgs } from "../../profile/base/ProfileFindManyArgs";
import { Profile } from "../../profile/base/Profile";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { AppRoutingFormsFormFindManyArgs } from "../../appRoutingFormsForm/base/AppRoutingFormsFormFindManyArgs";
import { AppRoutingFormsForm } from "../../appRoutingFormsForm/base/AppRoutingFormsForm";
import { VerifiedNumberFindManyArgs } from "../../verifiedNumber/base/VerifiedNumberFindManyArgs";
import { VerifiedNumber } from "../../verifiedNumber/base/VerifiedNumber";
import { WebhookFindManyArgs } from "../../webhook/base/WebhookFindManyArgs";
import { Webhook } from "../../webhook/base/Webhook";
import { WorkflowFindManyArgs } from "../../workflow/base/WorkflowFindManyArgs";
import { Workflow } from "../../workflow/base/Workflow";
import { TeamService } from "../team.service";
@graphql.Resolver(() => Team)
export class TeamResolverBase {
  constructor(protected readonly service: TeamService) {}

  async _teamsMeta(
    @graphql.Args() args: TeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Team])
  async teams(@graphql.Args() args: TeamFindManyArgs): Promise<Team[]> {
    return this.service.teams(args);
  }

  @graphql.Query(() => Team, { nullable: true })
  async team(@graphql.Args() args: TeamFindUniqueArgs): Promise<Team | null> {
    const result = await this.service.team(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Team)
  async createTeam(@graphql.Args() args: CreateTeamArgs): Promise<Team> {
    return await this.service.createTeam({
      ...args,
      data: {
        ...args.data,

        parent: args.data.parent
          ? {
              connect: args.data.parent,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Team)
  async updateTeam(@graphql.Args() args: UpdateTeamArgs): Promise<Team | null> {
    try {
      return await this.service.updateTeam({
        ...args,
        data: {
          ...args.data,

          parent: args.data.parent
            ? {
                connect: args.data.parent,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Team)
  async deleteTeam(@graphql.Args() args: DeleteTeamArgs): Promise<Team | null> {
    try {
      return await this.service.deleteTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AccessCode], { name: "accessCodes" })
  async findAccessCodes(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: AccessCodeFindManyArgs
  ): Promise<AccessCode[]> {
    const results = await this.service.findAccessCodes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ApiKey], { name: "apiKeys" })
  async findApiKeys(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: ApiKeyFindManyArgs
  ): Promise<ApiKey[]> {
    const results = await this.service.findApiKeys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Team], { name: "children" })
  async findChildren(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: TeamFindManyArgs
  ): Promise<Team[]> {
    const results = await this.service.findChildren(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Credential], { name: "credentials" })
  async findCredentials(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: CredentialFindManyArgs
  ): Promise<Credential[]> {
    const results = await this.service.findCredentials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EventType], { name: "eventTypes" })
  async findEventTypes(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: EventTypeFindManyArgs
  ): Promise<EventType[]> {
    const results = await this.service.findEventTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InstantMeetingToken], {
    name: "instantMeetingTokens",
  })
  async findInstantMeetingTokens(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: InstantMeetingTokenFindManyArgs
  ): Promise<InstantMeetingToken[]> {
    const results = await this.service.findInstantMeetingTokens(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [VerificationToken], { name: "inviteTokens" })
  async findInviteTokens(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: VerificationTokenFindManyArgs
  ): Promise<VerificationToken[]> {
    const results = await this.service.findInviteTokens(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Membership], { name: "members" })
  async findMembers(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: MembershipFindManyArgs
  ): Promise<Membership[]> {
    const results = await this.service.findMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Profile], { name: "orgProfiles" })
  async findOrgProfiles(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: ProfileFindManyArgs
  ): Promise<Profile[]> {
    const results = await this.service.findOrgProfiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [User], { name: "orgUsers" })
  async findOrgUsers(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findOrgUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AppRoutingFormsForm], { name: "routingForms" })
  async findRoutingForms(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: AppRoutingFormsFormFindManyArgs
  ): Promise<AppRoutingFormsForm[]> {
    const results = await this.service.findRoutingForms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [VerifiedNumber], { name: "verifiedNumbers" })
  async findVerifiedNumbers(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: VerifiedNumberFindManyArgs
  ): Promise<VerifiedNumber[]> {
    const results = await this.service.findVerifiedNumbers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Webhook], { name: "webhooks" })
  async findWebhooks(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: WebhookFindManyArgs
  ): Promise<Webhook[]> {
    const results = await this.service.findWebhooks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Workflow], { name: "workflows" })
  async findWorkflows(
    @graphql.Parent() parent: Team,
    @graphql.Args() args: WorkflowFindManyArgs
  ): Promise<Workflow[]> {
    const results = await this.service.findWorkflows(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "parent",
  })
  async getParent(@graphql.Parent() parent: Team): Promise<Team | null> {
    const result = await this.service.getParent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
