/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Deployment } from "./Deployment";
import { DeploymentCountArgs } from "./DeploymentCountArgs";
import { DeploymentFindManyArgs } from "./DeploymentFindManyArgs";
import { DeploymentFindUniqueArgs } from "./DeploymentFindUniqueArgs";
import { CreateDeploymentArgs } from "./CreateDeploymentArgs";
import { UpdateDeploymentArgs } from "./UpdateDeploymentArgs";
import { DeleteDeploymentArgs } from "./DeleteDeploymentArgs";
import { DeploymentService } from "../deployment.service";
@graphql.Resolver(() => Deployment)
export class DeploymentResolverBase {
  constructor(protected readonly service: DeploymentService) {}

  async _deploymentsMeta(
    @graphql.Args() args: DeploymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Deployment])
  async deployments(
    @graphql.Args() args: DeploymentFindManyArgs
  ): Promise<Deployment[]> {
    return this.service.deployments(args);
  }

  @graphql.Query(() => Deployment, { nullable: true })
  async deployment(
    @graphql.Args() args: DeploymentFindUniqueArgs
  ): Promise<Deployment | null> {
    const result = await this.service.deployment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Deployment)
  async createDeployment(
    @graphql.Args() args: CreateDeploymentArgs
  ): Promise<Deployment> {
    return await this.service.createDeployment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Deployment)
  async updateDeployment(
    @graphql.Args() args: UpdateDeploymentArgs
  ): Promise<Deployment | null> {
    try {
      return await this.service.updateDeployment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Deployment)
  async deleteDeployment(
    @graphql.Args() args: DeleteDeploymentArgs
  ): Promise<Deployment | null> {
    try {
      return await this.service.deleteDeployment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
