/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SelectedSlot } from "./SelectedSlot";
import { SelectedSlotCountArgs } from "./SelectedSlotCountArgs";
import { SelectedSlotFindManyArgs } from "./SelectedSlotFindManyArgs";
import { SelectedSlotFindUniqueArgs } from "./SelectedSlotFindUniqueArgs";
import { CreateSelectedSlotArgs } from "./CreateSelectedSlotArgs";
import { UpdateSelectedSlotArgs } from "./UpdateSelectedSlotArgs";
import { DeleteSelectedSlotArgs } from "./DeleteSelectedSlotArgs";
import { SelectedSlotService } from "../selectedSlot.service";
@graphql.Resolver(() => SelectedSlot)
export class SelectedSlotResolverBase {
  constructor(protected readonly service: SelectedSlotService) {}

  async _selectedSlotsMeta(
    @graphql.Args() args: SelectedSlotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SelectedSlot])
  async selectedSlots(
    @graphql.Args() args: SelectedSlotFindManyArgs
  ): Promise<SelectedSlot[]> {
    return this.service.selectedSlots(args);
  }

  @graphql.Query(() => SelectedSlot, { nullable: true })
  async selectedSlot(
    @graphql.Args() args: SelectedSlotFindUniqueArgs
  ): Promise<SelectedSlot | null> {
    const result = await this.service.selectedSlot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SelectedSlot)
  async createSelectedSlot(
    @graphql.Args() args: CreateSelectedSlotArgs
  ): Promise<SelectedSlot> {
    return await this.service.createSelectedSlot({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SelectedSlot)
  async updateSelectedSlot(
    @graphql.Args() args: UpdateSelectedSlotArgs
  ): Promise<SelectedSlot | null> {
    try {
      return await this.service.updateSelectedSlot({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SelectedSlot)
  async deleteSelectedSlot(
    @graphql.Args() args: DeleteSelectedSlotArgs
  ): Promise<SelectedSlot | null> {
    try {
      return await this.service.deleteSelectedSlot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
