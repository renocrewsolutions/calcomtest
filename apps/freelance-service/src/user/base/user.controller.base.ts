/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        accessCodes: true,
        accounts: true,
        allowDynamicBooking: true,
        allowSEOIndexing: true,
        apiKeys: true,
        appTheme: true,
        availability: true,
        avatar: true,
        avatarUrl: true,
        away: true,
        backupCodes: true,
        bio: true,
        bookingRedirects: true,
        bookingRedirectsTo: true,
        bookings: true,
        brandColor: true,
        bufferTime: true,
        completedOnboarding: true,
        createdDate: true,
        credentials: true,
        darkBrandColor: true,
        defaultScheduleId: true,
        destinationCalendarId: true,
        disableImpersonation: true,
        email: true,
        emailVerified: true,
        endTime: true,
        feedback: true,
        hideBranding: true,
        hosts: true,
        id: true,
        identityProvider: true,
        identityProviderId: true,
        impersonatedBy: true,
        impersonatedUsers: true,
        invitedTo: true,
        locale: true,
        locked: true,
        metadata: true,
        movedToProfileId: true,
        name: true,
        organizationId: true,
        ownedEventTypes: true,
        passwordId: true,
        profiles: true,
        receiveMonthlyDigestEmail: true,
        role: true,
        routingForms: true,
        schedules: true,
        selectedCalendars: true,
        sessions: true,
        startTime: true,
        teams: true,
        theme: true,
        timeFormat: true,
        timeZone: true,
        trialEndsAt: true,
        twoFactorEnabled: true,
        twoFactorSecret: true,
        username: true,
        verified: true,
        verifiedNumbers: true,
        webhooks: true,
        weekStart: true,
        workflows: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        accessCodes: true,
        accounts: true,
        allowDynamicBooking: true,
        allowSEOIndexing: true,
        apiKeys: true,
        appTheme: true,
        availability: true,
        avatar: true,
        avatarUrl: true,
        away: true,
        backupCodes: true,
        bio: true,
        bookingRedirects: true,
        bookingRedirectsTo: true,
        bookings: true,
        brandColor: true,
        bufferTime: true,
        completedOnboarding: true,
        createdDate: true,
        credentials: true,
        darkBrandColor: true,
        defaultScheduleId: true,
        destinationCalendarId: true,
        disableImpersonation: true,
        email: true,
        emailVerified: true,
        endTime: true,
        feedback: true,
        hideBranding: true,
        hosts: true,
        id: true,
        identityProvider: true,
        identityProviderId: true,
        impersonatedBy: true,
        impersonatedUsers: true,
        invitedTo: true,
        locale: true,
        locked: true,
        metadata: true,
        movedToProfileId: true,
        name: true,
        organizationId: true,
        ownedEventTypes: true,
        passwordId: true,
        profiles: true,
        receiveMonthlyDigestEmail: true,
        role: true,
        routingForms: true,
        schedules: true,
        selectedCalendars: true,
        sessions: true,
        startTime: true,
        teams: true,
        theme: true,
        timeFormat: true,
        timeZone: true,
        trialEndsAt: true,
        twoFactorEnabled: true,
        twoFactorSecret: true,
        username: true,
        verified: true,
        verifiedNumbers: true,
        webhooks: true,
        weekStart: true,
        workflows: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        accessCodes: true,
        accounts: true,
        allowDynamicBooking: true,
        allowSEOIndexing: true,
        apiKeys: true,
        appTheme: true,
        availability: true,
        avatar: true,
        avatarUrl: true,
        away: true,
        backupCodes: true,
        bio: true,
        bookingRedirects: true,
        bookingRedirectsTo: true,
        bookings: true,
        brandColor: true,
        bufferTime: true,
        completedOnboarding: true,
        createdDate: true,
        credentials: true,
        darkBrandColor: true,
        defaultScheduleId: true,
        destinationCalendarId: true,
        disableImpersonation: true,
        email: true,
        emailVerified: true,
        endTime: true,
        feedback: true,
        hideBranding: true,
        hosts: true,
        id: true,
        identityProvider: true,
        identityProviderId: true,
        impersonatedBy: true,
        impersonatedUsers: true,
        invitedTo: true,
        locale: true,
        locked: true,
        metadata: true,
        movedToProfileId: true,
        name: true,
        organizationId: true,
        ownedEventTypes: true,
        passwordId: true,
        profiles: true,
        receiveMonthlyDigestEmail: true,
        role: true,
        routingForms: true,
        schedules: true,
        selectedCalendars: true,
        sessions: true,
        startTime: true,
        teams: true,
        theme: true,
        timeFormat: true,
        timeZone: true,
        trialEndsAt: true,
        twoFactorEnabled: true,
        twoFactorSecret: true,
        username: true,
        verified: true,
        verifiedNumbers: true,
        webhooks: true,
        weekStart: true,
        workflows: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          accessCodes: true,
          accounts: true,
          allowDynamicBooking: true,
          allowSEOIndexing: true,
          apiKeys: true,
          appTheme: true,
          availability: true,
          avatar: true,
          avatarUrl: true,
          away: true,
          backupCodes: true,
          bio: true,
          bookingRedirects: true,
          bookingRedirectsTo: true,
          bookings: true,
          brandColor: true,
          bufferTime: true,
          completedOnboarding: true,
          createdDate: true,
          credentials: true,
          darkBrandColor: true,
          defaultScheduleId: true,
          destinationCalendarId: true,
          disableImpersonation: true,
          email: true,
          emailVerified: true,
          endTime: true,
          feedback: true,
          hideBranding: true,
          hosts: true,
          id: true,
          identityProvider: true,
          identityProviderId: true,
          impersonatedBy: true,
          impersonatedUsers: true,
          invitedTo: true,
          locale: true,
          locked: true,
          metadata: true,
          movedToProfileId: true,
          name: true,
          organizationId: true,
          ownedEventTypes: true,
          passwordId: true,
          profiles: true,
          receiveMonthlyDigestEmail: true,
          role: true,
          routingForms: true,
          schedules: true,
          selectedCalendars: true,
          sessions: true,
          startTime: true,
          teams: true,
          theme: true,
          timeFormat: true,
          timeZone: true,
          trialEndsAt: true,
          twoFactorEnabled: true,
          twoFactorSecret: true,
          username: true,
          verified: true,
          verifiedNumbers: true,
          webhooks: true,
          weekStart: true,
          workflows: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          accessCodes: true,
          accounts: true,
          allowDynamicBooking: true,
          allowSEOIndexing: true,
          apiKeys: true,
          appTheme: true,
          availability: true,
          avatar: true,
          avatarUrl: true,
          away: true,
          backupCodes: true,
          bio: true,
          bookingRedirects: true,
          bookingRedirectsTo: true,
          bookings: true,
          brandColor: true,
          bufferTime: true,
          completedOnboarding: true,
          createdDate: true,
          credentials: true,
          darkBrandColor: true,
          defaultScheduleId: true,
          destinationCalendarId: true,
          disableImpersonation: true,
          email: true,
          emailVerified: true,
          endTime: true,
          feedback: true,
          hideBranding: true,
          hosts: true,
          id: true,
          identityProvider: true,
          identityProviderId: true,
          impersonatedBy: true,
          impersonatedUsers: true,
          invitedTo: true,
          locale: true,
          locked: true,
          metadata: true,
          movedToProfileId: true,
          name: true,
          organizationId: true,
          ownedEventTypes: true,
          passwordId: true,
          profiles: true,
          receiveMonthlyDigestEmail: true,
          role: true,
          routingForms: true,
          schedules: true,
          selectedCalendars: true,
          sessions: true,
          startTime: true,
          teams: true,
          theme: true,
          timeFormat: true,
          timeZone: true,
          trialEndsAt: true,
          twoFactorEnabled: true,
          twoFactorSecret: true,
          username: true,
          verified: true,
          verifiedNumbers: true,
          webhooks: true,
          weekStart: true,
          workflows: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
