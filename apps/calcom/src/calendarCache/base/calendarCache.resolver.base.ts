/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CalendarCache } from "./CalendarCache";
import { CalendarCacheCountArgs } from "./CalendarCacheCountArgs";
import { CalendarCacheFindManyArgs } from "./CalendarCacheFindManyArgs";
import { CalendarCacheFindUniqueArgs } from "./CalendarCacheFindUniqueArgs";
import { CreateCalendarCacheArgs } from "./CreateCalendarCacheArgs";
import { UpdateCalendarCacheArgs } from "./UpdateCalendarCacheArgs";
import { DeleteCalendarCacheArgs } from "./DeleteCalendarCacheArgs";
import { Credential } from "../../credential/base/Credential";
import { CalendarCacheService } from "../calendarCache.service";
@graphql.Resolver(() => CalendarCache)
export class CalendarCacheResolverBase {
  constructor(protected readonly service: CalendarCacheService) {}

  async _calendarCachesMeta(
    @graphql.Args() args: CalendarCacheCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CalendarCache])
  async calendarCaches(
    @graphql.Args() args: CalendarCacheFindManyArgs
  ): Promise<CalendarCache[]> {
    return this.service.calendarCaches(args);
  }

  @graphql.Query(() => CalendarCache, { nullable: true })
  async calendarCache(
    @graphql.Args() args: CalendarCacheFindUniqueArgs
  ): Promise<CalendarCache | null> {
    const result = await this.service.calendarCache(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CalendarCache)
  async createCalendarCache(
    @graphql.Args() args: CreateCalendarCacheArgs
  ): Promise<CalendarCache> {
    return await this.service.createCalendarCache({
      ...args,
      data: {
        ...args.data,

        credential: args.data.credential
          ? {
              connect: args.data.credential,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CalendarCache)
  async updateCalendarCache(
    @graphql.Args() args: UpdateCalendarCacheArgs
  ): Promise<CalendarCache | null> {
    try {
      return await this.service.updateCalendarCache({
        ...args,
        data: {
          ...args.data,

          credential: args.data.credential
            ? {
                connect: args.data.credential,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CalendarCache)
  async deleteCalendarCache(
    @graphql.Args() args: DeleteCalendarCacheArgs
  ): Promise<CalendarCache | null> {
    try {
      return await this.service.deleteCalendarCache(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Credential, {
    nullable: true,
    name: "credential",
  })
  async getCredential(
    @graphql.Parent() parent: CalendarCache
  ): Promise<Credential | null> {
    const result = await this.service.getCredential(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
