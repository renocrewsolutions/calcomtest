/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  ValidateNested,
  IsOptional,
  IsString,
  IsEnum,
  IsBoolean,
} from "class-validator";
import { AppModelWhereUniqueInput } from "../../appModel/base/AppModelWhereUniqueInput";
import { Type } from "class-transformer";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { EnumPaymentPaymentOption } from "./EnumPaymentPaymentOption";

@InputType()
class PaymentCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: false,
    type: () => AppModelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AppModelWhereUniqueInput)
  @IsOptional()
  @Field(() => AppModelWhereUniqueInput, {
    nullable: true,
  })
  appField?: AppModelWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => BookingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BookingWhereUniqueInput)
  @IsOptional()
  @Field(() => BookingWhereUniqueInput, {
    nullable: true,
  })
  booking?: BookingWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  currency!: string;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  data!: InputJsonValue;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  externalId!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  fee!: number;

  @ApiProperty({
    required: false,
    enum: EnumPaymentPaymentOption,
  })
  @IsEnum(EnumPaymentPaymentOption)
  @IsOptional()
  @Field(() => EnumPaymentPaymentOption, {
    nullable: true,
  })
  paymentOption?: "ON_BOOKING" | "HOLD" | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  refunded!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  success!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  uid!: string;
}

export { PaymentCreateInput as PaymentCreateInput };
