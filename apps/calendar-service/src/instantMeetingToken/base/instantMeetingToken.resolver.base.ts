/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InstantMeetingToken } from "./InstantMeetingToken";
import { InstantMeetingTokenCountArgs } from "./InstantMeetingTokenCountArgs";
import { InstantMeetingTokenFindManyArgs } from "./InstantMeetingTokenFindManyArgs";
import { InstantMeetingTokenFindUniqueArgs } from "./InstantMeetingTokenFindUniqueArgs";
import { CreateInstantMeetingTokenArgs } from "./CreateInstantMeetingTokenArgs";
import { UpdateInstantMeetingTokenArgs } from "./UpdateInstantMeetingTokenArgs";
import { DeleteInstantMeetingTokenArgs } from "./DeleteInstantMeetingTokenArgs";
import { Booking } from "../../booking/base/Booking";
import { Team } from "../../team/base/Team";
import { InstantMeetingTokenService } from "../instantMeetingToken.service";
@graphql.Resolver(() => InstantMeetingToken)
export class InstantMeetingTokenResolverBase {
  constructor(protected readonly service: InstantMeetingTokenService) {}

  async _instantMeetingTokensMeta(
    @graphql.Args() args: InstantMeetingTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InstantMeetingToken])
  async instantMeetingTokens(
    @graphql.Args() args: InstantMeetingTokenFindManyArgs
  ): Promise<InstantMeetingToken[]> {
    return this.service.instantMeetingTokens(args);
  }

  @graphql.Query(() => InstantMeetingToken, { nullable: true })
  async instantMeetingToken(
    @graphql.Args() args: InstantMeetingTokenFindUniqueArgs
  ): Promise<InstantMeetingToken | null> {
    const result = await this.service.instantMeetingToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InstantMeetingToken)
  async createInstantMeetingToken(
    @graphql.Args() args: CreateInstantMeetingTokenArgs
  ): Promise<InstantMeetingToken> {
    return await this.service.createInstantMeetingToken({
      ...args,
      data: {
        ...args.data,

        booking: args.data.booking
          ? {
              connect: args.data.booking,
            }
          : undefined,

        team: {
          connect: args.data.team,
        },
      },
    });
  }

  @graphql.Mutation(() => InstantMeetingToken)
  async updateInstantMeetingToken(
    @graphql.Args() args: UpdateInstantMeetingTokenArgs
  ): Promise<InstantMeetingToken | null> {
    try {
      return await this.service.updateInstantMeetingToken({
        ...args,
        data: {
          ...args.data,

          booking: args.data.booking
            ? {
                connect: args.data.booking,
              }
            : undefined,

          team: {
            connect: args.data.team,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InstantMeetingToken)
  async deleteInstantMeetingToken(
    @graphql.Args() args: DeleteInstantMeetingTokenArgs
  ): Promise<InstantMeetingToken | null> {
    try {
      return await this.service.deleteInstantMeetingToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Booking, {
    nullable: true,
    name: "booking",
  })
  async getBooking(
    @graphql.Parent() parent: InstantMeetingToken
  ): Promise<Booking | null> {
    const result = await this.service.getBooking(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async getTeam(
    @graphql.Parent() parent: InstantMeetingToken
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
