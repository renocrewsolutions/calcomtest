/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutOfOfficeEntryService } from "../outOfOfficeEntry.service";
import { OutOfOfficeEntryCreateInput } from "./OutOfOfficeEntryCreateInput";
import { OutOfOfficeEntry } from "./OutOfOfficeEntry";
import { OutOfOfficeEntryFindManyArgs } from "./OutOfOfficeEntryFindManyArgs";
import { OutOfOfficeEntryWhereUniqueInput } from "./OutOfOfficeEntryWhereUniqueInput";
import { OutOfOfficeEntryUpdateInput } from "./OutOfOfficeEntryUpdateInput";

export class OutOfOfficeEntryControllerBase {
  constructor(protected readonly service: OutOfOfficeEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OutOfOfficeEntry })
  async createOutOfOfficeEntry(
    @common.Body() data: OutOfOfficeEntryCreateInput
  ): Promise<OutOfOfficeEntry> {
    return await this.service.createOutOfOfficeEntry({
      data: data,
      select: {
        createdAt: true,
        end: true,
        id: true,
        start: true,
        toUserId: true,
        updatedAt: true,
        userId: true,
        uuid: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OutOfOfficeEntry] })
  @ApiNestedQuery(OutOfOfficeEntryFindManyArgs)
  async outOfOfficeEntries(
    @common.Req() request: Request
  ): Promise<OutOfOfficeEntry[]> {
    const args = plainToClass(OutOfOfficeEntryFindManyArgs, request.query);
    return this.service.outOfOfficeEntries({
      ...args,
      select: {
        createdAt: true,
        end: true,
        id: true,
        start: true,
        toUserId: true,
        updatedAt: true,
        userId: true,
        uuid: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OutOfOfficeEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outOfOfficeEntry(
    @common.Param() params: OutOfOfficeEntryWhereUniqueInput
  ): Promise<OutOfOfficeEntry | null> {
    const result = await this.service.outOfOfficeEntry({
      where: params,
      select: {
        createdAt: true,
        end: true,
        id: true,
        start: true,
        toUserId: true,
        updatedAt: true,
        userId: true,
        uuid: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OutOfOfficeEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutOfOfficeEntry(
    @common.Param() params: OutOfOfficeEntryWhereUniqueInput,
    @common.Body() data: OutOfOfficeEntryUpdateInput
  ): Promise<OutOfOfficeEntry | null> {
    try {
      return await this.service.updateOutOfOfficeEntry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          end: true,
          id: true,
          start: true,
          toUserId: true,
          updatedAt: true,
          userId: true,
          uuid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OutOfOfficeEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutOfOfficeEntry(
    @common.Param() params: OutOfOfficeEntryWhereUniqueInput
  ): Promise<OutOfOfficeEntry | null> {
    try {
      return await this.service.deleteOutOfOfficeEntry({
        where: params,
        select: {
          createdAt: true,
          end: true,
          id: true,
          start: true,
          toUserId: true,
          updatedAt: true,
          userId: true,
          uuid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
