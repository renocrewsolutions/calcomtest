/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessCodeCreateNestedManyWithoutTeamsInput } from "./AccessCodeCreateNestedManyWithoutTeamsInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsBoolean,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { ApiKeyCreateNestedManyWithoutTeamsInput } from "./ApiKeyCreateNestedManyWithoutTeamsInput";
import { TeamCreateNestedManyWithoutTeamsInput } from "./TeamCreateNestedManyWithoutTeamsInput";
import { CredentialCreateNestedManyWithoutTeamsInput } from "./CredentialCreateNestedManyWithoutTeamsInput";
import { EventTypeCreateNestedManyWithoutTeamsInput } from "./EventTypeCreateNestedManyWithoutTeamsInput";
import { InstantMeetingTokenCreateNestedManyWithoutTeamsInput } from "./InstantMeetingTokenCreateNestedManyWithoutTeamsInput";
import { VerificationTokenCreateNestedManyWithoutTeamsInput } from "./VerificationTokenCreateNestedManyWithoutTeamsInput";
import { MembershipCreateNestedManyWithoutTeamsInput } from "./MembershipCreateNestedManyWithoutTeamsInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ProfileCreateNestedManyWithoutTeamsInput } from "./ProfileCreateNestedManyWithoutTeamsInput";
import { UserCreateNestedManyWithoutTeamsInput } from "./UserCreateNestedManyWithoutTeamsInput";
import { TeamWhereUniqueInput } from "./TeamWhereUniqueInput";
import { AppRoutingFormsFormCreateNestedManyWithoutTeamsInput } from "./AppRoutingFormsFormCreateNestedManyWithoutTeamsInput";
import { VerifiedNumberCreateNestedManyWithoutTeamsInput } from "./VerifiedNumberCreateNestedManyWithoutTeamsInput";
import { WebhookCreateNestedManyWithoutTeamsInput } from "./WebhookCreateNestedManyWithoutTeamsInput";
import { WorkflowCreateNestedManyWithoutTeamsInput } from "./WorkflowCreateNestedManyWithoutTeamsInput";

@InputType()
class TeamCreateInput {
  @ApiProperty({
    required: false,
    type: () => AccessCodeCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => AccessCodeCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => AccessCodeCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  accessCodes?: AccessCodeCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: () => ApiKeyCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => ApiKeyCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => ApiKeyCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  apiKeys?: ApiKeyCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  appIconLogo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  appLogo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  brandColor?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  calVideoLogo?: string | null;

  @ApiProperty({
    required: false,
    type: () => TeamCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => TeamCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => TeamCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  children?: TeamCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: () => CredentialCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => CredentialCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => CredentialCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  credentials?: CredentialCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  darkBrandColor?: string | null;

  @ApiProperty({
    required: false,
    type: () => EventTypeCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => EventTypeCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => EventTypeCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  eventTypes?: EventTypeCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hideBookATeamMember!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hideBranding!: boolean;

  @ApiProperty({
    required: false,
    type: () => InstantMeetingTokenCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => InstantMeetingTokenCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => InstantMeetingTokenCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  instantMeetingTokens?: InstantMeetingTokenCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: () => VerificationTokenCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => VerificationTokenCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => VerificationTokenCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  inviteTokens?: VerificationTokenCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isPrivate!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logoUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => MembershipCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => MembershipCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => MembershipCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  members?: MembershipCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  metadata?: InputJsonValue;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: () => ProfileCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => ProfileCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => ProfileCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  orgProfiles?: ProfileCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: () => UserCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => UserCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => UserCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  orgUsers?: UserCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: () => TeamWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TeamWhereUniqueInput)
  @IsOptional()
  @Field(() => TeamWhereUniqueInput, {
    nullable: true,
  })
  parent?: TeamWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  pendingPayment!: boolean;

  @ApiProperty({
    required: false,
    type: () => AppRoutingFormsFormCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => AppRoutingFormsFormCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => AppRoutingFormsFormCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  routingForms?: AppRoutingFormsFormCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  slug?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  theme?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  timeFormat?: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  timeZone!: string;

  @ApiProperty({
    required: false,
    type: () => VerifiedNumberCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => VerifiedNumberCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => VerifiedNumberCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  verifiedNumbers?: VerifiedNumberCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: false,
    type: () => WebhookCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => WebhookCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => WebhookCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  webhooks?: WebhookCreateNestedManyWithoutTeamsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  weekStart!: string;

  @ApiProperty({
    required: false,
    type: () => WorkflowCreateNestedManyWithoutTeamsInput,
  })
  @ValidateNested()
  @Type(() => WorkflowCreateNestedManyWithoutTeamsInput)
  @IsOptional()
  @Field(() => WorkflowCreateNestedManyWithoutTeamsInput, {
    nullable: true,
  })
  workflows?: WorkflowCreateNestedManyWithoutTeamsInput;
}

export { TeamCreateInput as TeamCreateInput };
