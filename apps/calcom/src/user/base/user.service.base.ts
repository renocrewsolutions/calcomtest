/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User, // @ts-ignore
  AccessCode, // @ts-ignore
  Account, // @ts-ignore
  ApiKey, // @ts-ignore
  Availability, // @ts-ignore
  OutOfOfficeEntry, // @ts-ignore
  Booking, // @ts-ignore
  Credential, // @ts-ignore
  Feedback, // @ts-ignore
  Host, // @ts-ignore
  Impersonation, // @ts-ignore
  EventType, // @ts-ignore
  Profile, // @ts-ignore
  AppRoutingFormsForm, // @ts-ignore
  Schedule, // @ts-ignore
  SelectedCalendar, // @ts-ignore
  Session, // @ts-ignore
  Membership, // @ts-ignore
  VerifiedNumber, // @ts-ignore
  Webhook, // @ts-ignore
  Workflow, // @ts-ignore
  DestinationCalendar, // @ts-ignore
  Team, // @ts-ignore
  UserPassword,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCountArgs>
  ): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<User[]> {
    return this.prisma.user.findMany(args);
  }
  async user<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<User | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser<T extends Prisma.UserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCreateArgs>
  ): Promise<User> {
    return this.prisma.user.create<T>(args);
  }
  async updateUser<T extends Prisma.UserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserUpdateArgs>
  ): Promise<User> {
    return this.prisma.user.update<T>(args);
  }
  async deleteUser<T extends Prisma.UserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDeleteArgs>
  ): Promise<User> {
    return this.prisma.user.delete(args);
  }

  async findAccessCodes(
    parentId: number,
    args: Prisma.AccessCodeFindManyArgs
  ): Promise<AccessCode[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accessCodes(args);
  }

  async findAccounts(
    parentId: number,
    args: Prisma.AccountFindManyArgs
  ): Promise<Account[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accounts(args);
  }

  async findApiKeys(
    parentId: number,
    args: Prisma.ApiKeyFindManyArgs
  ): Promise<ApiKey[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apiKeys(args);
  }

  async findAvailability(
    parentId: number,
    args: Prisma.AvailabilityFindManyArgs
  ): Promise<Availability[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availability(args);
  }

  async findBookingRedirects(
    parentId: number,
    args: Prisma.OutOfOfficeEntryFindManyArgs
  ): Promise<OutOfOfficeEntry[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookingRedirects(args);
  }

  async findBookingRedirectsTo(
    parentId: number,
    args: Prisma.OutOfOfficeEntryFindManyArgs
  ): Promise<OutOfOfficeEntry[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookingRedirectsTo(args);
  }

  async findBookings(
    parentId: number,
    args: Prisma.BookingFindManyArgs
  ): Promise<Booking[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findCredentials(
    parentId: number,
    args: Prisma.CredentialFindManyArgs
  ): Promise<Credential[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .credentials(args);
  }

  async findFeedback(
    parentId: number,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedback(args);
  }

  async findHosts(
    parentId: number,
    args: Prisma.HostFindManyArgs
  ): Promise<Host[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .hosts(args);
  }

  async findImpersonatedBy(
    parentId: number,
    args: Prisma.ImpersonationFindManyArgs
  ): Promise<Impersonation[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .impersonatedBy(args);
  }

  async findImpersonatedUsers(
    parentId: number,
    args: Prisma.ImpersonationFindManyArgs
  ): Promise<Impersonation[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .impersonatedUsers(args);
  }

  async findOwnedEventTypes(
    parentId: number,
    args: Prisma.EventTypeFindManyArgs
  ): Promise<EventType[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ownedEventTypes(args);
  }

  async findProfiles(
    parentId: number,
    args: Prisma.ProfileFindManyArgs
  ): Promise<Profile[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .profiles(args);
  }

  async findRoutingForms(
    parentId: number,
    args: Prisma.AppRoutingFormsFormFindManyArgs
  ): Promise<AppRoutingFormsForm[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .routingForms(args);
  }

  async findSchedules(
    parentId: number,
    args: Prisma.ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .schedules(args);
  }

  async findSelectedCalendars(
    parentId: number,
    args: Prisma.SelectedCalendarFindManyArgs
  ): Promise<SelectedCalendar[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .selectedCalendars(args);
  }

  async findSessions(
    parentId: number,
    args: Prisma.SessionFindManyArgs
  ): Promise<Session[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sessions(args);
  }

  async findTeams(
    parentId: number,
    args: Prisma.MembershipFindManyArgs
  ): Promise<Membership[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .teams(args);
  }

  async findVerifiedNumbers(
    parentId: number,
    args: Prisma.VerifiedNumberFindManyArgs
  ): Promise<VerifiedNumber[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .verifiedNumbers(args);
  }

  async findWebhooks(
    parentId: number,
    args: Prisma.WebhookFindManyArgs
  ): Promise<Webhook[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webhooks(args);
  }

  async findWorkflows(
    parentId: number,
    args: Prisma.WorkflowFindManyArgs
  ): Promise<Workflow[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workflows(args);
  }

  async getDestinationCalendar(
    parentId: number
  ): Promise<DestinationCalendar | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .destinationCalendar();
  }

  async getMovedToProfile(parentId: number): Promise<Profile | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .movedToProfile();
  }

  async getOrganization(parentId: number): Promise<Team | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }

  async getPassword(parentId: number): Promise<UserPassword | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .password();
  }
}
