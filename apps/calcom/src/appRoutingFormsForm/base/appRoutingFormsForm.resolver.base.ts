/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AppRoutingFormsForm } from "./AppRoutingFormsForm";
import { AppRoutingFormsFormCountArgs } from "./AppRoutingFormsFormCountArgs";
import { AppRoutingFormsFormFindManyArgs } from "./AppRoutingFormsFormFindManyArgs";
import { AppRoutingFormsFormFindUniqueArgs } from "./AppRoutingFormsFormFindUniqueArgs";
import { CreateAppRoutingFormsFormArgs } from "./CreateAppRoutingFormsFormArgs";
import { UpdateAppRoutingFormsFormArgs } from "./UpdateAppRoutingFormsFormArgs";
import { DeleteAppRoutingFormsFormArgs } from "./DeleteAppRoutingFormsFormArgs";
import { AppRoutingFormsFormResponseFindManyArgs } from "../../appRoutingFormsFormResponse/base/AppRoutingFormsFormResponseFindManyArgs";
import { AppRoutingFormsFormResponse } from "../../appRoutingFormsFormResponse/base/AppRoutingFormsFormResponse";
import { Team } from "../../team/base/Team";
import { AppRoutingFormsFormService } from "../appRoutingFormsForm.service";
@graphql.Resolver(() => AppRoutingFormsForm)
export class AppRoutingFormsFormResolverBase {
  constructor(protected readonly service: AppRoutingFormsFormService) {}

  async _appRoutingFormsFormsMeta(
    @graphql.Args() args: AppRoutingFormsFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppRoutingFormsForm])
  async appRoutingFormsForms(
    @graphql.Args() args: AppRoutingFormsFormFindManyArgs
  ): Promise<AppRoutingFormsForm[]> {
    return this.service.appRoutingFormsForms(args);
  }

  @graphql.Query(() => AppRoutingFormsForm, { nullable: true })
  async appRoutingFormsForm(
    @graphql.Args() args: AppRoutingFormsFormFindUniqueArgs
  ): Promise<AppRoutingFormsForm | null> {
    const result = await this.service.appRoutingFormsForm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppRoutingFormsForm)
  async createAppRoutingFormsForm(
    @graphql.Args() args: CreateAppRoutingFormsFormArgs
  ): Promise<AppRoutingFormsForm> {
    return await this.service.createAppRoutingFormsForm({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AppRoutingFormsForm)
  async updateAppRoutingFormsForm(
    @graphql.Args() args: UpdateAppRoutingFormsFormArgs
  ): Promise<AppRoutingFormsForm | null> {
    try {
      return await this.service.updateAppRoutingFormsForm({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppRoutingFormsForm)
  async deleteAppRoutingFormsForm(
    @graphql.Args() args: DeleteAppRoutingFormsFormArgs
  ): Promise<AppRoutingFormsForm | null> {
    try {
      return await this.service.deleteAppRoutingFormsForm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AppRoutingFormsFormResponse], {
    name: "responses",
  })
  async findResponses(
    @graphql.Parent() parent: AppRoutingFormsForm,
    @graphql.Args() args: AppRoutingFormsFormResponseFindManyArgs
  ): Promise<AppRoutingFormsFormResponse[]> {
    const results = await this.service.findResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async getTeam(
    @graphql.Parent() parent: AppRoutingFormsForm
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
