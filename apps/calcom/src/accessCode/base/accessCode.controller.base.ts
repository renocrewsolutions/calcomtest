/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccessCodeService } from "../accessCode.service";
import { AccessCodeCreateInput } from "./AccessCodeCreateInput";
import { AccessCode } from "./AccessCode";
import { AccessCodeFindManyArgs } from "./AccessCodeFindManyArgs";
import { AccessCodeWhereUniqueInput } from "./AccessCodeWhereUniqueInput";
import { AccessCodeUpdateInput } from "./AccessCodeUpdateInput";

export class AccessCodeControllerBase {
  constructor(protected readonly service: AccessCodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccessCode })
  async createAccessCode(
    @common.Body() data: AccessCodeCreateInput
  ): Promise<AccessCode> {
    return await this.service.createAccessCode({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,

        team: data.team
          ? {
              connect: data.team,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        code: true,
        expiresAt: true,
        id: true,
        scopes: true,

        team: {
          select: {
            id: true,
          },
        },

        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccessCode] })
  @ApiNestedQuery(AccessCodeFindManyArgs)
  async accessCodes(@common.Req() request: Request): Promise<AccessCode[]> {
    const args = plainToClass(AccessCodeFindManyArgs, request.query);
    return this.service.accessCodes({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        code: true,
        expiresAt: true,
        id: true,
        scopes: true,

        team: {
          select: {
            id: true,
          },
        },

        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccessCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accessCode(
    @common.Param() params: AccessCodeWhereUniqueInput
  ): Promise<AccessCode | null> {
    const result = await this.service.accessCode({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        code: true,
        expiresAt: true,
        id: true,
        scopes: true,

        team: {
          select: {
            id: true,
          },
        },

        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccessCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccessCode(
    @common.Param() params: AccessCodeWhereUniqueInput,
    @common.Body() data: AccessCodeUpdateInput
  ): Promise<AccessCode | null> {
    try {
      return await this.service.updateAccessCode({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,

          team: data.team
            ? {
                connect: data.team,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          code: true,
          expiresAt: true,
          id: true,
          scopes: true,

          team: {
            select: {
              id: true,
            },
          },

          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccessCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccessCode(
    @common.Param() params: AccessCodeWhereUniqueInput
  ): Promise<AccessCode | null> {
    try {
      return await this.service.deleteAccessCode({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          code: true,
          expiresAt: true,
          id: true,
          scopes: true,

          team: {
            select: {
              id: true,
            },
          },

          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
