/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BidCreateNestedManyWithoutUser1sInput } from "./BidCreateNestedManyWithoutUser1sInput";
import { ValidateNested, IsOptional, IsString, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { JobCreateNestedManyWithoutUser1sInput } from "./JobCreateNestedManyWithoutUser1sInput";
import { MessageCreateNestedManyWithoutUser1sInput } from "./MessageCreateNestedManyWithoutUser1sInput";
import { ReviewCreateNestedManyWithoutUser1sInput } from "./ReviewCreateNestedManyWithoutUser1sInput";
import { EnumUser1Role } from "./EnumUser1Role";
import { SkillCreateNestedManyWithoutUser1sInput } from "./SkillCreateNestedManyWithoutUser1sInput";
import { TransactionCreateNestedManyWithoutUser1sInput } from "./TransactionCreateNestedManyWithoutUser1sInput";

@InputType()
class User1CreateInput {
  @ApiProperty({
    required: false,
    type: () => BidCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => BidCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => BidCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  bids?: BidCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: () => JobCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => JobCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => JobCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  jobs?: JobCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileImage?: string | null;

  @ApiProperty({
    required: false,
    type: () => MessageCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => MessageCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => MessageCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  receivedMessages?: MessageCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  reviewsAsClient?: ReviewCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  reviewsAsFreelancer?: ReviewCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: true,
    enum: EnumUser1Role,
  })
  @IsEnum(EnumUser1Role)
  @Field(() => EnumUser1Role)
  role!: "CLIENT" | "FREELANCER";

  @ApiProperty({
    required: false,
    type: () => MessageCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => MessageCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => MessageCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  sentMessages?: MessageCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: true,
    type: () => SkillCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => SkillCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => SkillCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  skills?: SkillCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  transactionsAsClient?: TransactionCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutUser1sInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutUser1sInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutUser1sInput, {
    nullable: true,
  })
  transactionsAsFreelancer?: TransactionCreateNestedManyWithoutUser1sInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;
}

export { User1CreateInput as User1CreateInput };
