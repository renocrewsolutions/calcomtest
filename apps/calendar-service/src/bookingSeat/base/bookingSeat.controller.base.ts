/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookingSeatService } from "../bookingSeat.service";
import { BookingSeatCreateInput } from "./BookingSeatCreateInput";
import { BookingSeat } from "./BookingSeat";
import { BookingSeatFindManyArgs } from "./BookingSeatFindManyArgs";
import { BookingSeatWhereUniqueInput } from "./BookingSeatWhereUniqueInput";
import { BookingSeatUpdateInput } from "./BookingSeatUpdateInput";

export class BookingSeatControllerBase {
  constructor(protected readonly service: BookingSeatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BookingSeat })
  async createBookingSeat(
    @common.Body() data: BookingSeatCreateInput
  ): Promise<BookingSeat> {
    return await this.service.createBookingSeat({
      data: {
        ...data,

        attendee: {
          connect: data.attendee,
        },

        booking: {
          connect: data.booking,
        },
      },
      select: {
        attendee: {
          select: {
            id: true,
          },
        },

        booking: {
          select: {
            id: true,
          },
        },

        data: true,
        id: true,
        referenceUid: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BookingSeat] })
  @ApiNestedQuery(BookingSeatFindManyArgs)
  async bookingSeats(@common.Req() request: Request): Promise<BookingSeat[]> {
    const args = plainToClass(BookingSeatFindManyArgs, request.query);
    return this.service.bookingSeats({
      ...args,
      select: {
        attendee: {
          select: {
            id: true,
          },
        },

        booking: {
          select: {
            id: true,
          },
        },

        data: true,
        id: true,
        referenceUid: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BookingSeat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bookingSeat(
    @common.Param() params: BookingSeatWhereUniqueInput
  ): Promise<BookingSeat | null> {
    const result = await this.service.bookingSeat({
      where: params,
      select: {
        attendee: {
          select: {
            id: true,
          },
        },

        booking: {
          select: {
            id: true,
          },
        },

        data: true,
        id: true,
        referenceUid: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BookingSeat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBookingSeat(
    @common.Param() params: BookingSeatWhereUniqueInput,
    @common.Body() data: BookingSeatUpdateInput
  ): Promise<BookingSeat | null> {
    try {
      return await this.service.updateBookingSeat({
        where: params,
        data: {
          ...data,

          attendee: {
            connect: data.attendee,
          },

          booking: {
            connect: data.booking,
          },
        },
        select: {
          attendee: {
            select: {
              id: true,
            },
          },

          booking: {
            select: {
              id: true,
            },
          },

          data: true,
          id: true,
          referenceUid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BookingSeat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBookingSeat(
    @common.Param() params: BookingSeatWhereUniqueInput
  ): Promise<BookingSeat | null> {
    try {
      return await this.service.deleteBookingSeat({
        where: params,
        select: {
          attendee: {
            select: {
              id: true,
            },
          },

          booking: {
            select: {
              id: true,
            },
          },

          data: true,
          id: true,
          referenceUid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
