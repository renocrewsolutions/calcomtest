/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InstantMeetingToken, // @ts-ignore
  Booking, // @ts-ignore
  Team,
} from "@prisma/client";

export class InstantMeetingTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.InstantMeetingTokenCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstantMeetingTokenCountArgs>
  ): Promise<number> {
    return this.prisma.instantMeetingToken.count(args);
  }

  async instantMeetingTokens<T extends Prisma.InstantMeetingTokenFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstantMeetingTokenFindManyArgs>
  ): Promise<InstantMeetingToken[]> {
    return this.prisma.instantMeetingToken.findMany(args);
  }
  async instantMeetingToken<T extends Prisma.InstantMeetingTokenFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstantMeetingTokenFindUniqueArgs>
  ): Promise<InstantMeetingToken | null> {
    return this.prisma.instantMeetingToken.findUnique(args);
  }
  async createInstantMeetingToken<
    T extends Prisma.InstantMeetingTokenCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.InstantMeetingTokenCreateArgs>
  ): Promise<InstantMeetingToken> {
    return this.prisma.instantMeetingToken.create<T>(args);
  }
  async updateInstantMeetingToken<
    T extends Prisma.InstantMeetingTokenUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.InstantMeetingTokenUpdateArgs>
  ): Promise<InstantMeetingToken> {
    return this.prisma.instantMeetingToken.update<T>(args);
  }
  async deleteInstantMeetingToken<
    T extends Prisma.InstantMeetingTokenDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.InstantMeetingTokenDeleteArgs>
  ): Promise<InstantMeetingToken> {
    return this.prisma.instantMeetingToken.delete(args);
  }

  async getBooking(parentId: number): Promise<Booking | null> {
    return this.prisma.instantMeetingToken
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }

  async getTeam(parentId: number): Promise<Team | null> {
    return this.prisma.instantMeetingToken
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
