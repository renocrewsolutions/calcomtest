/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OAuthClient } from "./OAuthClient";
import { OAuthClientCountArgs } from "./OAuthClientCountArgs";
import { OAuthClientFindManyArgs } from "./OAuthClientFindManyArgs";
import { OAuthClientFindUniqueArgs } from "./OAuthClientFindUniqueArgs";
import { CreateOAuthClientArgs } from "./CreateOAuthClientArgs";
import { UpdateOAuthClientArgs } from "./UpdateOAuthClientArgs";
import { DeleteOAuthClientArgs } from "./DeleteOAuthClientArgs";
import { AccessCodeFindManyArgs } from "../../accessCode/base/AccessCodeFindManyArgs";
import { AccessCode } from "../../accessCode/base/AccessCode";
import { OAuthClientService } from "../oAuthClient.service";
@graphql.Resolver(() => OAuthClient)
export class OAuthClientResolverBase {
  constructor(protected readonly service: OAuthClientService) {}

  async _oAuthClientsMeta(
    @graphql.Args() args: OAuthClientCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OAuthClient])
  async oAuthClients(
    @graphql.Args() args: OAuthClientFindManyArgs
  ): Promise<OAuthClient[]> {
    return this.service.oAuthClients(args);
  }

  @graphql.Query(() => OAuthClient, { nullable: true })
  async oAuthClient(
    @graphql.Args() args: OAuthClientFindUniqueArgs
  ): Promise<OAuthClient | null> {
    const result = await this.service.oAuthClient(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OAuthClient)
  async createOAuthClient(
    @graphql.Args() args: CreateOAuthClientArgs
  ): Promise<OAuthClient> {
    return await this.service.createOAuthClient({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OAuthClient)
  async updateOAuthClient(
    @graphql.Args() args: UpdateOAuthClientArgs
  ): Promise<OAuthClient | null> {
    try {
      return await this.service.updateOAuthClient({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OAuthClient)
  async deleteOAuthClient(
    @graphql.Args() args: DeleteOAuthClientArgs
  ): Promise<OAuthClient | null> {
    try {
      return await this.service.deleteOAuthClient(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AccessCode], { name: "accessCodes" })
  async findAccessCodes(
    @graphql.Parent() parent: OAuthClient,
    @graphql.Args() args: AccessCodeFindManyArgs
  ): Promise<AccessCode[]> {
    const results = await this.service.findAccessCodes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
