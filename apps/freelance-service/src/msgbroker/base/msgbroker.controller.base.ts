/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MsgbrokerService } from "../msgbroker.service";
import { MsgbrokerCreateInput } from "./MsgbrokerCreateInput";
import { Msgbroker } from "./Msgbroker";
import { MsgbrokerFindManyArgs } from "./MsgbrokerFindManyArgs";
import { MsgbrokerWhereUniqueInput } from "./MsgbrokerWhereUniqueInput";
import { MsgbrokerUpdateInput } from "./MsgbrokerUpdateInput";

export class MsgbrokerControllerBase {
  constructor(protected readonly service: MsgbrokerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Msgbroker })
  async createMsgbroker(
    @common.Body() data: MsgbrokerCreateInput
  ): Promise<Msgbroker> {
    return await this.service.createMsgbroker({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Msgbroker] })
  @ApiNestedQuery(MsgbrokerFindManyArgs)
  async msgbrokers(@common.Req() request: Request): Promise<Msgbroker[]> {
    const args = plainToClass(MsgbrokerFindManyArgs, request.query);
    return this.service.msgbrokers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Msgbroker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async msgbroker(
    @common.Param() params: MsgbrokerWhereUniqueInput
  ): Promise<Msgbroker | null> {
    const result = await this.service.msgbroker({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Msgbroker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMsgbroker(
    @common.Param() params: MsgbrokerWhereUniqueInput,
    @common.Body() data: MsgbrokerUpdateInput
  ): Promise<Msgbroker | null> {
    try {
      return await this.service.updateMsgbroker({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Msgbroker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMsgbroker(
    @common.Param() params: MsgbrokerWhereUniqueInput
  ): Promise<Msgbroker | null> {
    try {
      return await this.service.deleteMsgbroker({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
