datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User1 {
  bids                     Bid[]
  bio                      String?
  createdAt                DateTime      @default(now())
  email                    String        @unique
  id                       Int           @id @default(autoincrement())
  jobs                     Job[]
  location                 String?
  password                 String
  profileImage             String?
  receivedMessages         Message[]     @relation(name: "receivedMessages")
  reviewsAsClient          Review[]      @relation(name: "reviewsAsClient")
  reviewsAsFreelancer      Review[]      @relation(name: "reviewsAsFreelancer")
  role                     EnumUser1Role
  sentMessages             Message[]     @relation(name: "sender")
  skills                   Skill[]
  transactionsAsClient     Transaction[] @relation(name: "transactionsAsClient")
  transactionsAsFreelancer Transaction[] @relation(name: "transactionsAsFreelancer")
  username                 String        @unique
}

model Skill {
  description String?
  id          Int     @id @default(autoincrement())
  name        String
  users       User1[]
}

model Job {
  bids         Bid[]
  budget       Float
  client       User1         @relation(fields: [clientId], references: [id])
  clientId     Int
  createdAt    DateTime      @default(now())
  description  String
  id           Int           @id @default(autoincrement())
  reviews      Review[]
  title        String
  transactions Transaction[]
}

model Bid {
  amount       Float
  createdAt    DateTime @default(now())
  freelancer   User1    @relation(fields: [freelancerId], references: [id])
  freelancerId Int
  id           Int      @id @default(autoincrement())
  job          Job      @relation(fields: [jobId], references: [id])
  jobId        Int
  proposal     String
}

model Message {
  content    String
  id         Int      @id @default(autoincrement())
  receiver   User1    @relation(name: "receivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  sender     User1    @relation(name: "sender", fields: [senderId], references: [id])
  senderId   Int
  sentAt     DateTime @default(now())
}

model Review {
  client       User1    @relation(name: "reviewsAsClient", fields: [clientId], references: [id])
  clientId     Int
  content      String
  createdAt    DateTime @default(now())
  freelancer   User1    @relation(name: "reviewsAsFreelancer", fields: [freelancerId], references: [id])
  freelancerId Int
  id           Int      @id @default(autoincrement())
  job          Job      @relation(fields: [jobId], references: [id])
  jobId        Int
  rating       Int
}

model Transaction {
  amount          Float
  client          User1    @relation(name: "transactionsAsClient", fields: [clientId], references: [id])
  clientId        Int
  freelancer      User1    @relation(name: "transactionsAsFreelancer", fields: [freelancerId], references: [id])
  freelancerId    Int
  id              Int      @id @default(autoincrement())
  job             Job      @relation(fields: [jobId], references: [id])
  jobId           Int
  transactionDate DateTime @default(now())
}

model Msgbroker {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

enum EnumUser1Role {
  CLIENT
  FREELANCER
}
