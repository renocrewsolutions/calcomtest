/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BidCreateNestedManyWithoutUsersInput } from "./BidCreateNestedManyWithoutUsersInput";
import { ValidateNested, IsOptional, IsString, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { JobCreateNestedManyWithoutUsersInput } from "./JobCreateNestedManyWithoutUsersInput";
import { MessageCreateNestedManyWithoutUsersInput } from "./MessageCreateNestedManyWithoutUsersInput";
import { ReviewCreateNestedManyWithoutUsersInput } from "./ReviewCreateNestedManyWithoutUsersInput";
import { EnumUserRole } from "./EnumUserRole";
import { SkillCreateNestedManyWithoutUsersInput } from "./SkillCreateNestedManyWithoutUsersInput";
import { TransactionCreateNestedManyWithoutUsersInput } from "./TransactionCreateNestedManyWithoutUsersInput";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: () => BidCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => BidCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => BidCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  bids?: BidCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    type: () => JobCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => JobCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => JobCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  jobs?: JobCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profileImage?: string | null;

  @ApiProperty({
    required: false,
    type: () => MessageCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  receivedMessages?: MessageCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  reviewsAsClient?: ReviewCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  reviewsAsFreelancer?: ReviewCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @Field(() => EnumUserRole)
  role!: "CLIENT" | "FREELANCER";

  @ApiProperty({
    required: false,
    type: () => MessageCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  sentMessages?: MessageCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SkillCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SkillCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SkillCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  skills?: SkillCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  transactionsAsClient?: TransactionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  transactionsAsFreelancer?: TransactionCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;
}

export { UserCreateInput as UserCreateInput };
