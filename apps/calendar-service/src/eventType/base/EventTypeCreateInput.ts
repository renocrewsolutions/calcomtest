/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  IsBoolean,
  ValidateNested,
  IsOptional,
  IsString,
  IsDate,
  IsEnum,
} from "class-validator";
import { AvailabilityCreateNestedManyWithoutEventTypesInput } from "./AvailabilityCreateNestedManyWithoutEventTypesInput";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { BookingCreateNestedManyWithoutEventTypesInput } from "./BookingCreateNestedManyWithoutEventTypesInput";
import { EventTypeCreateNestedManyWithoutEventTypesInput } from "./EventTypeCreateNestedManyWithoutEventTypesInput";
import { EventTypeCustomInputCreateNestedManyWithoutEventTypesInput } from "./EventTypeCustomInputCreateNestedManyWithoutEventTypesInput";
import { DestinationCalendarWhereUniqueInput } from "../../destinationCalendar/base/DestinationCalendarWhereUniqueInput";
import { HashedLinkWhereUniqueInput } from "../../hashedLink/base/HashedLinkWhereUniqueInput";
import { HostCreateNestedManyWithoutEventTypesInput } from "./HostCreateNestedManyWithoutEventTypesInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { EventTypeWhereUniqueInput } from "./EventTypeWhereUniqueInput";
import { EnumEventTypePeriodType } from "./EnumEventTypePeriodType";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";
import { ScheduleWhereUniqueInput } from "../../schedule/base/ScheduleWhereUniqueInput";
import { EnumEventTypeSchedulingType } from "./EnumEventTypeSchedulingType";
import { TeamWhereUniqueInput } from "../../team/base/TeamWhereUniqueInput";
import { WebhookCreateNestedManyWithoutEventTypesInput } from "./WebhookCreateNestedManyWithoutEventTypesInput";
import { WorkflowsOnEventTypeCreateNestedManyWithoutEventTypesInput } from "./WorkflowsOnEventTypeCreateNestedManyWithoutEventTypesInput";

@InputType()
class EventTypeCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  afterEventBuffer!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  assignAllTeamMembers!: boolean;

  @ApiProperty({
    required: false,
    type: () => AvailabilityCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => AvailabilityCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => AvailabilityCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  availability?: AvailabilityCreateNestedManyWithoutEventTypesInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  beforeEventBuffer!: number;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  bookingFields?: InputJsonValue;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  bookingLimits?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => BookingCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => BookingCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => BookingCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  bookings?: BookingCreateNestedManyWithoutEventTypesInput;

  @ApiProperty({
    required: false,
    type: () => EventTypeCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => EventTypeCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => EventTypeCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  children?: EventTypeCreateNestedManyWithoutEventTypesInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  currency!: string;

  @ApiProperty({
    required: false,
    type: () => EventTypeCustomInputCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => EventTypeCustomInputCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => EventTypeCustomInputCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: () => DestinationCalendarWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DestinationCalendarWhereUniqueInput)
  @IsOptional()
  @Field(() => DestinationCalendarWhereUniqueInput, {
    nullable: true,
  })
  destinationCalendar?: DestinationCalendarWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  disableGuests!: boolean;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  durationLimits?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  eventName?: string | null;

  @ApiProperty({
    required: false,
    type: () => HashedLinkWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => HashedLinkWhereUniqueInput)
  @IsOptional()
  @Field(() => HashedLinkWhereUniqueInput, {
    nullable: true,
  })
  hashedLink?: HashedLinkWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hidden!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hideCalendarNotes!: boolean;

  @ApiProperty({
    required: false,
    type: () => HostCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => HostCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => HostCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  hosts?: HostCreateNestedManyWithoutEventTypesInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isInstantEvent!: boolean;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  length!: number;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  locations?: InputJsonValue;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  lockTimeZoneToggleOnBookingPage!: boolean;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  metadata?: InputJsonValue;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  minimumBookingNotice!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  offsetStart!: number;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  onlyShowFirstAvailableSlot!: boolean;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  owner?: UserWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EventTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EventTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => EventTypeWhereUniqueInput, {
    nullable: true,
  })
  parent?: EventTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  periodCountCalendarDays?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  periodDays?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  periodEndDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  periodStartDate?: Date | null;

  @ApiProperty({
    required: true,
    enum: EnumEventTypePeriodType,
  })
  @IsEnum(EnumEventTypePeriodType)
  @Field(() => EnumEventTypePeriodType)
  periodType!: "UNLIMITED" | "ROLLING" | "RANGE";

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  position!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  price!: number;

  @ApiProperty({
    required: false,
    type: () => ProfileWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProfileWhereUniqueInput)
  @IsOptional()
  @Field(() => ProfileWhereUniqueInput, {
    nullable: true,
  })
  profile?: ProfileWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  recurringEvent?: InputJsonValue;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requiresBookerEmailVerification!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requiresConfirmation!: boolean;

  @ApiProperty({
    required: false,
    type: () => ScheduleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ScheduleWhereUniqueInput)
  @IsOptional()
  @Field(() => ScheduleWhereUniqueInput, {
    nullable: true,
  })
  schedule?: ScheduleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    enum: EnumEventTypeSchedulingType,
  })
  @IsEnum(EnumEventTypeSchedulingType)
  @IsOptional()
  @Field(() => EnumEventTypeSchedulingType, {
    nullable: true,
  })
  schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  seatsPerTimeSlot?: number | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  seatsShowAttendees?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  seatsShowAvailabilityCount?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  slotInterval?: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  slug!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  successRedirectUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => TeamWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TeamWhereUniqueInput)
  @IsOptional()
  @Field(() => TeamWhereUniqueInput, {
    nullable: true,
  })
  team?: TeamWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  title!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  useEventTypeDestinationCalendarEmail!: boolean;

  @ApiProperty({
    required: false,
    type: () => WebhookCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => WebhookCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => WebhookCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  webhooks?: WebhookCreateNestedManyWithoutEventTypesInput;

  @ApiProperty({
    required: false,
    type: () => WorkflowsOnEventTypeCreateNestedManyWithoutEventTypesInput,
  })
  @ValidateNested()
  @Type(() => WorkflowsOnEventTypeCreateNestedManyWithoutEventTypesInput)
  @IsOptional()
  @Field(() => WorkflowsOnEventTypeCreateNestedManyWithoutEventTypesInput, {
    nullable: true,
  })
  workflows?: WorkflowsOnEventTypeCreateNestedManyWithoutEventTypesInput;
}

export { EventTypeCreateInput as EventTypeCreateInput };
