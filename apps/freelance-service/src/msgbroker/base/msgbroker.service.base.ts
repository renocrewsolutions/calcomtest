/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Msgbroker } from "@prisma/client";

export class MsgbrokerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MsgbrokerCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MsgbrokerCountArgs>
  ): Promise<number> {
    return this.prisma.msgbroker.count(args);
  }

  async msgbrokers<T extends Prisma.MsgbrokerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MsgbrokerFindManyArgs>
  ): Promise<Msgbroker[]> {
    return this.prisma.msgbroker.findMany(args);
  }
  async msgbroker<T extends Prisma.MsgbrokerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MsgbrokerFindUniqueArgs>
  ): Promise<Msgbroker | null> {
    return this.prisma.msgbroker.findUnique(args);
  }
  async createMsgbroker<T extends Prisma.MsgbrokerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MsgbrokerCreateArgs>
  ): Promise<Msgbroker> {
    return this.prisma.msgbroker.create<T>(args);
  }
  async updateMsgbroker<T extends Prisma.MsgbrokerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MsgbrokerUpdateArgs>
  ): Promise<Msgbroker> {
    return this.prisma.msgbroker.update<T>(args);
  }
  async deleteMsgbroker<T extends Prisma.MsgbrokerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MsgbrokerDeleteArgs>
  ): Promise<Msgbroker> {
    return this.prisma.msgbroker.delete(args);
  }
}
