/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BookingSeat } from "./BookingSeat";
import { BookingSeatCountArgs } from "./BookingSeatCountArgs";
import { BookingSeatFindManyArgs } from "./BookingSeatFindManyArgs";
import { BookingSeatFindUniqueArgs } from "./BookingSeatFindUniqueArgs";
import { CreateBookingSeatArgs } from "./CreateBookingSeatArgs";
import { UpdateBookingSeatArgs } from "./UpdateBookingSeatArgs";
import { DeleteBookingSeatArgs } from "./DeleteBookingSeatArgs";
import { Attendee } from "../../attendee/base/Attendee";
import { Booking } from "../../booking/base/Booking";
import { BookingSeatService } from "../bookingSeat.service";
@graphql.Resolver(() => BookingSeat)
export class BookingSeatResolverBase {
  constructor(protected readonly service: BookingSeatService) {}

  async _bookingSeatsMeta(
    @graphql.Args() args: BookingSeatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BookingSeat])
  async bookingSeats(
    @graphql.Args() args: BookingSeatFindManyArgs
  ): Promise<BookingSeat[]> {
    return this.service.bookingSeats(args);
  }

  @graphql.Query(() => BookingSeat, { nullable: true })
  async bookingSeat(
    @graphql.Args() args: BookingSeatFindUniqueArgs
  ): Promise<BookingSeat | null> {
    const result = await this.service.bookingSeat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BookingSeat)
  async createBookingSeat(
    @graphql.Args() args: CreateBookingSeatArgs
  ): Promise<BookingSeat> {
    return await this.service.createBookingSeat({
      ...args,
      data: {
        ...args.data,

        attendee: {
          connect: args.data.attendee,
        },

        booking: {
          connect: args.data.booking,
        },
      },
    });
  }

  @graphql.Mutation(() => BookingSeat)
  async updateBookingSeat(
    @graphql.Args() args: UpdateBookingSeatArgs
  ): Promise<BookingSeat | null> {
    try {
      return await this.service.updateBookingSeat({
        ...args,
        data: {
          ...args.data,

          attendee: {
            connect: args.data.attendee,
          },

          booking: {
            connect: args.data.booking,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BookingSeat)
  async deleteBookingSeat(
    @graphql.Args() args: DeleteBookingSeatArgs
  ): Promise<BookingSeat | null> {
    try {
      return await this.service.deleteBookingSeat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Attendee, {
    nullable: true,
    name: "attendee",
  })
  async getAttendee(
    @graphql.Parent() parent: BookingSeat
  ): Promise<Attendee | null> {
    const result = await this.service.getAttendee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Booking, {
    nullable: true,
    name: "booking",
  })
  async getBooking(
    @graphql.Parent() parent: BookingSeat
  ): Promise<Booking | null> {
    const result = await this.service.getBooking(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
