/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserPasswordService } from "../userPassword.service";
import { UserPasswordCreateInput } from "./UserPasswordCreateInput";
import { UserPassword } from "./UserPassword";
import { UserPasswordFindManyArgs } from "./UserPasswordFindManyArgs";
import { UserPasswordWhereUniqueInput } from "./UserPasswordWhereUniqueInput";
import { UserPasswordUpdateInput } from "./UserPasswordUpdateInput";

export class UserPasswordControllerBase {
  constructor(protected readonly service: UserPasswordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserPassword })
  async createUserPassword(
    @common.Body() data: UserPasswordCreateInput
  ): Promise<UserPassword> {
    return await this.service.createUserPassword({
      data: {
        ...data,

        user: {
          connect: data.user,
        },
      },
      select: {
        hash: true,
        id: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserPassword] })
  @ApiNestedQuery(UserPasswordFindManyArgs)
  async userPasswords(@common.Req() request: Request): Promise<UserPassword[]> {
    const args = plainToClass(UserPasswordFindManyArgs, request.query);
    return this.service.userPasswords({
      ...args,
      select: {
        hash: true,
        id: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserPassword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userPassword(
    @common.Param() params: UserPasswordWhereUniqueInput
  ): Promise<UserPassword | null> {
    const result = await this.service.userPassword({
      where: params,
      select: {
        hash: true,
        id: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserPassword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserPassword(
    @common.Param() params: UserPasswordWhereUniqueInput,
    @common.Body() data: UserPasswordUpdateInput
  ): Promise<UserPassword | null> {
    try {
      return await this.service.updateUserPassword({
        where: params,
        data: {
          ...data,

          user: {
            connect: data.user,
          },
        },
        select: {
          hash: true,
          id: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserPassword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserPassword(
    @common.Param() params: UserPasswordWhereUniqueInput
  ): Promise<UserPassword | null> {
    try {
      return await this.service.deleteUserPassword({
        where: params,
        select: {
          hash: true,
          id: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
