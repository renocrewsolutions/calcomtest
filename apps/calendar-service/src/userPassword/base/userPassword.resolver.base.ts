/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserPassword } from "./UserPassword";
import { UserPasswordCountArgs } from "./UserPasswordCountArgs";
import { UserPasswordFindManyArgs } from "./UserPasswordFindManyArgs";
import { UserPasswordFindUniqueArgs } from "./UserPasswordFindUniqueArgs";
import { CreateUserPasswordArgs } from "./CreateUserPasswordArgs";
import { UpdateUserPasswordArgs } from "./UpdateUserPasswordArgs";
import { DeleteUserPasswordArgs } from "./DeleteUserPasswordArgs";
import { User } from "../../user/base/User";
import { UserPasswordService } from "../userPassword.service";
@graphql.Resolver(() => UserPassword)
export class UserPasswordResolverBase {
  constructor(protected readonly service: UserPasswordService) {}

  async _userPasswordsMeta(
    @graphql.Args() args: UserPasswordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserPassword])
  async userPasswords(
    @graphql.Args() args: UserPasswordFindManyArgs
  ): Promise<UserPassword[]> {
    return this.service.userPasswords(args);
  }

  @graphql.Query(() => UserPassword, { nullable: true })
  async userPassword(
    @graphql.Args() args: UserPasswordFindUniqueArgs
  ): Promise<UserPassword | null> {
    const result = await this.service.userPassword(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserPassword)
  async createUserPassword(
    @graphql.Args() args: CreateUserPasswordArgs
  ): Promise<UserPassword> {
    return await this.service.createUserPassword({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => UserPassword)
  async updateUserPassword(
    @graphql.Args() args: UpdateUserPasswordArgs
  ): Promise<UserPassword | null> {
    try {
      return await this.service.updateUserPassword({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPassword)
  async deleteUserPassword(
    @graphql.Args() args: DeleteUserPasswordArgs
  ): Promise<UserPassword | null> {
    try {
      return await this.service.deleteUserPassword(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserPassword): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
