/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TempOrgRedirect } from "./TempOrgRedirect";
import { TempOrgRedirectCountArgs } from "./TempOrgRedirectCountArgs";
import { TempOrgRedirectFindManyArgs } from "./TempOrgRedirectFindManyArgs";
import { TempOrgRedirectFindUniqueArgs } from "./TempOrgRedirectFindUniqueArgs";
import { CreateTempOrgRedirectArgs } from "./CreateTempOrgRedirectArgs";
import { UpdateTempOrgRedirectArgs } from "./UpdateTempOrgRedirectArgs";
import { DeleteTempOrgRedirectArgs } from "./DeleteTempOrgRedirectArgs";
import { TempOrgRedirectService } from "../tempOrgRedirect.service";
@graphql.Resolver(() => TempOrgRedirect)
export class TempOrgRedirectResolverBase {
  constructor(protected readonly service: TempOrgRedirectService) {}

  async _tempOrgRedirectsMeta(
    @graphql.Args() args: TempOrgRedirectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TempOrgRedirect])
  async tempOrgRedirects(
    @graphql.Args() args: TempOrgRedirectFindManyArgs
  ): Promise<TempOrgRedirect[]> {
    return this.service.tempOrgRedirects(args);
  }

  @graphql.Query(() => TempOrgRedirect, { nullable: true })
  async tempOrgRedirect(
    @graphql.Args() args: TempOrgRedirectFindUniqueArgs
  ): Promise<TempOrgRedirect | null> {
    const result = await this.service.tempOrgRedirect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TempOrgRedirect)
  async createTempOrgRedirect(
    @graphql.Args() args: CreateTempOrgRedirectArgs
  ): Promise<TempOrgRedirect> {
    return await this.service.createTempOrgRedirect({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TempOrgRedirect)
  async updateTempOrgRedirect(
    @graphql.Args() args: UpdateTempOrgRedirectArgs
  ): Promise<TempOrgRedirect | null> {
    try {
      return await this.service.updateTempOrgRedirect({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TempOrgRedirect)
  async deleteTempOrgRedirect(
    @graphql.Args() args: DeleteTempOrgRedirectArgs
  ): Promise<TempOrgRedirect | null> {
    try {
      return await this.service.deleteTempOrgRedirect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
