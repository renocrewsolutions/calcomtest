/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TempOrgRedirectService } from "../tempOrgRedirect.service";
import { TempOrgRedirectCreateInput } from "./TempOrgRedirectCreateInput";
import { TempOrgRedirect } from "./TempOrgRedirect";
import { TempOrgRedirectFindManyArgs } from "./TempOrgRedirectFindManyArgs";
import { TempOrgRedirectWhereUniqueInput } from "./TempOrgRedirectWhereUniqueInput";
import { TempOrgRedirectUpdateInput } from "./TempOrgRedirectUpdateInput";

export class TempOrgRedirectControllerBase {
  constructor(protected readonly service: TempOrgRedirectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TempOrgRedirect })
  async createTempOrgRedirect(
    @common.Body() data: TempOrgRedirectCreateInput
  ): Promise<TempOrgRedirect> {
    return await this.service.createTempOrgRedirect({
      data: data,
      select: {
        createdAt: true,
        enabled: true,
        fromField: true,
        fromOrgId: true,
        id: true,
        toUrl: true,
        type: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TempOrgRedirect] })
  @ApiNestedQuery(TempOrgRedirectFindManyArgs)
  async tempOrgRedirects(
    @common.Req() request: Request
  ): Promise<TempOrgRedirect[]> {
    const args = plainToClass(TempOrgRedirectFindManyArgs, request.query);
    return this.service.tempOrgRedirects({
      ...args,
      select: {
        createdAt: true,
        enabled: true,
        fromField: true,
        fromOrgId: true,
        id: true,
        toUrl: true,
        type: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TempOrgRedirect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tempOrgRedirect(
    @common.Param() params: TempOrgRedirectWhereUniqueInput
  ): Promise<TempOrgRedirect | null> {
    const result = await this.service.tempOrgRedirect({
      where: params,
      select: {
        createdAt: true,
        enabled: true,
        fromField: true,
        fromOrgId: true,
        id: true,
        toUrl: true,
        type: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TempOrgRedirect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTempOrgRedirect(
    @common.Param() params: TempOrgRedirectWhereUniqueInput,
    @common.Body() data: TempOrgRedirectUpdateInput
  ): Promise<TempOrgRedirect | null> {
    try {
      return await this.service.updateTempOrgRedirect({
        where: params,
        data: data,
        select: {
          createdAt: true,
          enabled: true,
          fromField: true,
          fromOrgId: true,
          id: true,
          toUrl: true,
          type: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TempOrgRedirect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTempOrgRedirect(
    @common.Param() params: TempOrgRedirectWhereUniqueInput
  ): Promise<TempOrgRedirect | null> {
    try {
      return await this.service.deleteTempOrgRedirect({
        where: params,
        select: {
          createdAt: true,
          enabled: true,
          fromField: true,
          fromOrgId: true,
          id: true,
          toUrl: true,
          type: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
