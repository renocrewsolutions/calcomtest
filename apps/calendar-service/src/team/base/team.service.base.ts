/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Team, // @ts-ignore
  AccessCode, // @ts-ignore
  ApiKey, // @ts-ignore
  Credential, // @ts-ignore
  EventType, // @ts-ignore
  InstantMeetingToken, // @ts-ignore
  VerificationToken, // @ts-ignore
  Membership, // @ts-ignore
  Profile, // @ts-ignore
  User, // @ts-ignore
  AppRoutingFormsForm, // @ts-ignore
  VerifiedNumber, // @ts-ignore
  Webhook, // @ts-ignore
  Workflow,
} from "@prisma/client";

export class TeamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TeamCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeamCountArgs>
  ): Promise<number> {
    return this.prisma.team.count(args);
  }

  async teams<T extends Prisma.TeamFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeamFindManyArgs>
  ): Promise<Team[]> {
    return this.prisma.team.findMany(args);
  }
  async team<T extends Prisma.TeamFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeamFindUniqueArgs>
  ): Promise<Team | null> {
    return this.prisma.team.findUnique(args);
  }
  async createTeam<T extends Prisma.TeamCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeamCreateArgs>
  ): Promise<Team> {
    return this.prisma.team.create<T>(args);
  }
  async updateTeam<T extends Prisma.TeamUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeamUpdateArgs>
  ): Promise<Team> {
    return this.prisma.team.update<T>(args);
  }
  async deleteTeam<T extends Prisma.TeamDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeamDeleteArgs>
  ): Promise<Team> {
    return this.prisma.team.delete(args);
  }

  async findAccessCodes(
    parentId: number,
    args: Prisma.AccessCodeFindManyArgs
  ): Promise<AccessCode[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accessCodes(args);
  }

  async findApiKeys(
    parentId: number,
    args: Prisma.ApiKeyFindManyArgs
  ): Promise<ApiKey[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apiKeys(args);
  }

  async findChildren(
    parentId: number,
    args: Prisma.TeamFindManyArgs
  ): Promise<Team[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .children(args);
  }

  async findCredentials(
    parentId: number,
    args: Prisma.CredentialFindManyArgs
  ): Promise<Credential[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .credentials(args);
  }

  async findEventTypes(
    parentId: number,
    args: Prisma.EventTypeFindManyArgs
  ): Promise<EventType[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .eventTypes(args);
  }

  async findInstantMeetingTokens(
    parentId: number,
    args: Prisma.InstantMeetingTokenFindManyArgs
  ): Promise<InstantMeetingToken[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .instantMeetingTokens(args);
  }

  async findInviteTokens(
    parentId: number,
    args: Prisma.VerificationTokenFindManyArgs
  ): Promise<VerificationToken[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inviteTokens(args);
  }

  async findMembers(
    parentId: number,
    args: Prisma.MembershipFindManyArgs
  ): Promise<Membership[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .members(args);
  }

  async findOrgProfiles(
    parentId: number,
    args: Prisma.ProfileFindManyArgs
  ): Promise<Profile[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orgProfiles(args);
  }

  async findOrgUsers(
    parentId: number,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orgUsers(args);
  }

  async findRoutingForms(
    parentId: number,
    args: Prisma.AppRoutingFormsFormFindManyArgs
  ): Promise<AppRoutingFormsForm[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .routingForms(args);
  }

  async findVerifiedNumbers(
    parentId: number,
    args: Prisma.VerifiedNumberFindManyArgs
  ): Promise<VerifiedNumber[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .verifiedNumbers(args);
  }

  async findWebhooks(
    parentId: number,
    args: Prisma.WebhookFindManyArgs
  ): Promise<Webhook[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webhooks(args);
  }

  async findWorkflows(
    parentId: number,
    args: Prisma.WorkflowFindManyArgs
  ): Promise<Workflow[]> {
    return this.prisma.team
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workflows(args);
  }

  async getParent(parentId: number): Promise<Team | null> {
    return this.prisma.team
      .findUnique({
        where: { id: parentId },
      })
      .parent();
  }
}
