/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OutOfOfficeEntry } from "./OutOfOfficeEntry";
import { OutOfOfficeEntryCountArgs } from "./OutOfOfficeEntryCountArgs";
import { OutOfOfficeEntryFindManyArgs } from "./OutOfOfficeEntryFindManyArgs";
import { OutOfOfficeEntryFindUniqueArgs } from "./OutOfOfficeEntryFindUniqueArgs";
import { CreateOutOfOfficeEntryArgs } from "./CreateOutOfOfficeEntryArgs";
import { UpdateOutOfOfficeEntryArgs } from "./UpdateOutOfOfficeEntryArgs";
import { DeleteOutOfOfficeEntryArgs } from "./DeleteOutOfOfficeEntryArgs";
import { OutOfOfficeEntryService } from "../outOfOfficeEntry.service";
@graphql.Resolver(() => OutOfOfficeEntry)
export class OutOfOfficeEntryResolverBase {
  constructor(protected readonly service: OutOfOfficeEntryService) {}

  async _outOfOfficeEntriesMeta(
    @graphql.Args() args: OutOfOfficeEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OutOfOfficeEntry])
  async outOfOfficeEntries(
    @graphql.Args() args: OutOfOfficeEntryFindManyArgs
  ): Promise<OutOfOfficeEntry[]> {
    return this.service.outOfOfficeEntries(args);
  }

  @graphql.Query(() => OutOfOfficeEntry, { nullable: true })
  async outOfOfficeEntry(
    @graphql.Args() args: OutOfOfficeEntryFindUniqueArgs
  ): Promise<OutOfOfficeEntry | null> {
    const result = await this.service.outOfOfficeEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OutOfOfficeEntry)
  async createOutOfOfficeEntry(
    @graphql.Args() args: CreateOutOfOfficeEntryArgs
  ): Promise<OutOfOfficeEntry> {
    return await this.service.createOutOfOfficeEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OutOfOfficeEntry)
  async updateOutOfOfficeEntry(
    @graphql.Args() args: UpdateOutOfOfficeEntryArgs
  ): Promise<OutOfOfficeEntry | null> {
    try {
      return await this.service.updateOutOfOfficeEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OutOfOfficeEntry)
  async deleteOutOfOfficeEntry(
    @graphql.Args() args: DeleteOutOfOfficeEntryArgs
  ): Promise<OutOfOfficeEntry | null> {
    try {
      return await this.service.deleteOutOfOfficeEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
