/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SelectedSlot } from "@prisma/client";

export class SelectedSlotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SelectedSlotCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedSlotCountArgs>
  ): Promise<number> {
    return this.prisma.selectedSlot.count(args);
  }

  async selectedSlots<T extends Prisma.SelectedSlotFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedSlotFindManyArgs>
  ): Promise<SelectedSlot[]> {
    return this.prisma.selectedSlot.findMany(args);
  }
  async selectedSlot<T extends Prisma.SelectedSlotFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedSlotFindUniqueArgs>
  ): Promise<SelectedSlot | null> {
    return this.prisma.selectedSlot.findUnique(args);
  }
  async createSelectedSlot<T extends Prisma.SelectedSlotCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedSlotCreateArgs>
  ): Promise<SelectedSlot> {
    return this.prisma.selectedSlot.create<T>(args);
  }
  async updateSelectedSlot<T extends Prisma.SelectedSlotUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedSlotUpdateArgs>
  ): Promise<SelectedSlot> {
    return this.prisma.selectedSlot.update<T>(args);
  }
  async deleteSelectedSlot<T extends Prisma.SelectedSlotDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SelectedSlotDeleteArgs>
  ): Promise<SelectedSlot> {
    return this.prisma.selectedSlot.delete(args);
  }
}
