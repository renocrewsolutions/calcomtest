/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AppRoutingFormsForm, // @ts-ignore
  AppRoutingFormsFormResponse, // @ts-ignore
  Team,
} from "@prisma/client";

export class AppRoutingFormsFormServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AppRoutingFormsFormCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoutingFormsFormCountArgs>
  ): Promise<number> {
    return this.prisma.appRoutingFormsForm.count(args);
  }

  async appRoutingFormsForms<T extends Prisma.AppRoutingFormsFormFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoutingFormsFormFindManyArgs>
  ): Promise<AppRoutingFormsForm[]> {
    return this.prisma.appRoutingFormsForm.findMany(args);
  }
  async appRoutingFormsForm<T extends Prisma.AppRoutingFormsFormFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AppRoutingFormsFormFindUniqueArgs>
  ): Promise<AppRoutingFormsForm | null> {
    return this.prisma.appRoutingFormsForm.findUnique(args);
  }
  async createAppRoutingFormsForm<
    T extends Prisma.AppRoutingFormsFormCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AppRoutingFormsFormCreateArgs>
  ): Promise<AppRoutingFormsForm> {
    return this.prisma.appRoutingFormsForm.create<T>(args);
  }
  async updateAppRoutingFormsForm<
    T extends Prisma.AppRoutingFormsFormUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AppRoutingFormsFormUpdateArgs>
  ): Promise<AppRoutingFormsForm> {
    return this.prisma.appRoutingFormsForm.update<T>(args);
  }
  async deleteAppRoutingFormsForm<
    T extends Prisma.AppRoutingFormsFormDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AppRoutingFormsFormDeleteArgs>
  ): Promise<AppRoutingFormsForm> {
    return this.prisma.appRoutingFormsForm.delete(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.AppRoutingFormsFormResponseFindManyArgs
  ): Promise<AppRoutingFormsFormResponse[]> {
    return this.prisma.appRoutingFormsForm
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }

  async getTeam(parentId: string): Promise<Team | null> {
    return this.prisma.appRoutingFormsForm
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
